		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec  9 2010 18:28:39
	    Copyright 1997-2010 SRI International
		   Fri Oct 10 15:09:16 2014
Maude> 
	    Full Maude 2.5b January 14th 2011


	    Maude-NPA Version: 11/26/2011
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 97480 in 1152ms cpu (1182ms real) (84618 rewrites/second)
result GrammarList: (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => (#0:Msg ; #1:Msg) inL .)
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => (#1:Msg ; #0:Msg) inL .)
| errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .
==========================================
reduce in MAUDE-NPA : run(1, 0) .
rewrites: 2234 in 112ms cpu (113ms real) (19946 rewrites/second)
result IdSystem: < 1 > 
:: nil ::
[ nil, 
   -(Name1:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(Name2:Name ; fxMess) | nil] 
|| 
client-1 != Name1:Name
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1, 1) .
rewrites: 67265 in 848ms cpu (869ms real) (79321 rewrites/second)
result Summary: States>> 2 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(1, 2) .
rewrites: 14252 in 256ms cpu (265ms real) (55671 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 3) .
rewrites: 207 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 4) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 5) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 6) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 7) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 8) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 9) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 10) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 11) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(1, 12) .
rewrites: 175 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : run(1, 1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 > (
:: nil ::
[ nil | 
   -(#0:Name), 
   -(fxMess), 
   +(#0:Name ; fxMess), nil]  & 
:: nil ::
[ nil, 
   -(#1:Name ; fxMess), 
   +(client-2 ; fxMess) | 
   -(#0:Name ; fxMess), nil] )
|| 
(#0:Name ; fxMess) !inI,
client-1 != #1:Name
|| 
-(#0:Name), 
-(fxMess), 
+(#0:Name ; fxMess), 
-(#0:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 4) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 6) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 7) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 9) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 10) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 11) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 12) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 8 > 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] 
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#1:Name ; fxMess), 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil)
< 1 . 2 . 1 > (
:: nil ::
[ nil | 
   -(#1:Name), 
   -(fxMess), 
   +(#1:Name ; fxMess), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name ; fxMess), 
   +(client-2 ; fxMess), 
   -(#1:Name ; fxMess), nil] )
|| 
(#1:Name ; fxMess) !inI,
(#0:Name ; fxMess) !inI,
client-1 != #0:Name
|| 
generatedByIntruder(#0:Name ; fxMess), 
-(#0:Name ; fxMess), 
+(client-2 ; fxMess), 
-(#1:Name), 
-(fxMess), 
+(#1:Name ; fxMess), 
-(#1:Name ; fxMess)
|| 
nil
|| 
nil
Maude> Bye.
