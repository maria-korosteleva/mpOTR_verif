		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec  9 2010 18:28:39
	    Copyright 1997-2010 SRI International
		   Mon Feb 16 18:22:11 2015
Maude> 
	    Maude-NPA Version: 11/26/2011
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : run(1, (0).Zero) .
rewrites: 22026 in 120ms cpu (122ms real) (183550 rewrites/second)
result IdSystem: < 1 > 
:: fr_k:Fresh,fr_r:Fresh,fr_s:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; k2_h:Hash ; y2:Number ; S2:PubKey), 
   -(client3 ; k3_h:Hash ; y3:Number ; S3:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; k2_h:Hash ; k3_h:Hash) ;
    exp(g, r1)), 
   -(client2 ; sid2:Hash ; z2:Number), 
   -(client3 ; sid3:Hash ; z3:Number), 
   +(client1 ; (k1 xorc h(exp(y2:Number, x1))) ; h(exp(y2:Number, x1)) xorc h(
    exp(y3:Number, x1))), 
   -(client2 ; k2_tr2:Number ; T2:Number), 
   -(client3 ; k3_tr3:Number ; T3:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    k2_h:Hash ; k3_h:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; y2:Number ; (
    T2:Number xorc k2_tr2:Number xorc h(exp(y2:Number, x1))) ; S2:PubKey ;
    y3:Number ; (k3_tr3:Number xorc h(exp(y3:Number, x1))) ; S3:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; k2_h:Hash ; k3_h:Hash)
    ; h(exp(g, x1) ; k1 ; genPubClient1 ; y2:Number ; (T2:Number xorc
    k2_tr2:Number xorc h(exp(y2:Number, x1))) ; S2:PubKey ; y3:Number ; (
    k3_tr3:Number xorc h(exp(y3:Number, x1))) ; S3:PubKey))), 
   -(client2 ; c2_signed:Msg), 
   -(d2:Number), 
   -(client3 ; c3_signed:Msg), 
   -(d3:Number) | nil] 
|| 
x1 inI
|| 
nil
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : summary(1, 1) .
rewrites: 2129227743 in 5687404ms cpu (5740879ms real) (374376 rewrites/second)
result Summary: States>> 8 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 2) .
rewrites: 39757776 in 87840ms cpu (88617ms real) (452615 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 3) .
rewrites: 20577914 in 55896ms cpu (56250ms real) (368146 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 4) .
rewrites: 19151771 in 39068ms cpu (39305ms real) (490216 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 5) .
rewrites: 20381357 in 57568ms cpu (57973ms real) (354039 rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 6) .
rewrites: 554 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 7) .
rewrites: 522 in 4ms cpu (0ms real) (130500 rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 8) .
rewrites: 522 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 9) .
rewrites: 522 in 0ms cpu (1ms real) (~ rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 10) .
rewrites: 522 in 4ms cpu (2ms real) (130500 rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 11) .
rewrites: 522 in 0ms cpu (1ms real) (~ rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(1, 12) .
rewrites: 522 in 4ms cpu (0ms real) (130500 rewrites/second)
result Summary: States>> 4 Solutions>> 4
==========================================
reduce in MAUDE-NPA : run(1, 1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 21 > (
:: nil ::
[ nil | 
   +(x1), nil]  & 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))) | 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] )
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client3 ; #19:Msg) !inI
|| 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(x1), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 22 > (
:: nil ::
[ nil | 
   +(x1), nil]  & 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))) | 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] )
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client3 ; #20:Msg) !inI
|| 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(x1), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 23 > (
:: nil ::
[ nil | 
   +(x1), nil]  & 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))) | 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] )
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client3 ; #20:Msg) !inI
|| 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(x1), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 24 > (
:: nil ::
[ nil | 
   +(x1), nil]  & 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))) | 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] )
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client3 ; #21:Msg) !inI,
inst(#22:Number)
|| 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(x1), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil)
(< 1 . 576 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))) | 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client3 ; #19:Msg) !inI
|| 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 579 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))) | 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client3 ; #20:Msg) !inI
|| 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 582 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))) | 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client3 ; #20:Msg) !inI
|| 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 585 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))) | 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client3 ; #21:Msg) !inI
|| 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))) | 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))) | 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))) | 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))) | 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)) | 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)) | 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)) | 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)) | 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 4) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1) | 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1) | 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1) | 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil, 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1) | 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 6) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 7) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 9) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 10) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 11) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 12) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 576 . 1 . 1 . 1 . 1 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #9:Hash ; #10:Number), 
   -(client3 ; #11:Hash ; #12:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Number, x1))), 
   -(client2 ; #13:Number ; #14:Number), 
   -(client3 ; #15:Number ; #16:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
   -(client2 ; #17:Msg), 
   -(#18:Number), 
   -(client3 ; #19:Msg), 
   -(#20:Number), nil] 
|| 
x1 !inI,
#18:Number !inI,
#20:Number !inI,
(client2 ; #17:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #9:Hash ; #10:Number) !inI,
(client2 ; #13:Number ; #14:Number) !inI,
(client3 ; #19:Msg) !inI,
(client3 ; #6:Hash ; #7:Number ; #8:PubKey) !inI,
(client3 ; #11:Hash ; #12:Number) !inI,
(client3 ; #15:Number ; #16:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; #7:Number ; #8:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #9:Hash ; #10:Number), 
generatedByIntruder(client3 ; #11:Hash ; #12:Number), 
-(client2 ; #9:Hash ; #10:Number), 
-(client3 ; #11:Hash ; #12:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Number, x1))), 
generatedByIntruder(client2 ; #13:Number ; #14:Number), 
generatedByIntruder(client3 ; #15:Number ; #16:Number), 
-(client2 ; #13:Number ; #14:Number), 
-(client3 ; #15:Number ; #16:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ;
    #7:Number ; (#15:Number xorc h(exp(#7:Number, x1))) ; #8:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#18:Number), 
generatedByIntruder(#20:Number), 
generatedByIntruder(client2 ; #17:Msg), 
generatedByIntruder(client3 ; #19:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#13:Number xorc #14:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; #7:Number ; (#15:Number xorc h(
    exp(#7:Number, x1))) ; #8:PubKey))), 
-(client2 ; #17:Msg), 
-(#18:Number), 
-(client3 ; #19:Msg), 
-(#20:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 2 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
   -(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(
    exp(#7:Gen, x1 * #8:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; #4:Number ; #5:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
generatedByIntruder(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
-(client2 ; #3:Hash ; #4:Number ; #5:PubKey), 
-(client3 ; #6:Hash ; exp(#7:Gen, #8:Number) ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Number, x1))) ; h(exp(#4:Number, x1)) xorc h(exp(
    #7:Gen, x1 * #8:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #6:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (
    #14:Number xorc #15:Number xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(
    #7:Gen, #8:Number) ; (#16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ;
    #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #6:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; #4:Number ; (#14:Number xorc #15:Number
    xorc h(exp(#4:Number, x1))) ; #5:PubKey ; exp(#7:Gen, #8:Number) ; (
    #16:Number xorc h(exp(#7:Gen, x1 * #8:Number))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
(< 1 . 576 . 1 . 1 . 1 . 3 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #10:Hash ; #11:Number), 
   -(client3 ; #12:Hash ; #13:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
   -(client2 ; #14:Number ; #15:Number), 
   -(client3 ; #16:Number ; #17:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number
    xorc #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ;
    #8:Number ; (#16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
   -(client2 ; #18:Msg), 
   -(#19:Number), 
   -(client3 ; #20:Msg), 
   -(#21:Number), nil] 
|| 
x1 !inI,
#19:Number !inI,
#21:Number !inI,
(client2 ; #18:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #10:Hash ; #11:Number) !inI,
(client2 ; #14:Number ; #15:Number) !inI,
(client3 ; #20:Msg) !inI,
(client3 ; #7:Hash ; #8:Number ; #9:PubKey) !inI,
(client3 ; #12:Hash ; #13:Number) !inI,
(client3 ; #16:Number ; #17:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; #8:Number ; #9:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #10:Hash ; #11:Number), 
generatedByIntruder(client3 ; #12:Hash ; #13:Number), 
-(client2 ; #10:Hash ; #11:Number), 
-(client3 ; #12:Hash ; #13:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#8:Number, x1))
    xorc h(exp(#4:Gen, x1 * #5:Number))), 
generatedByIntruder(client2 ; #14:Number ; #15:Number), 
generatedByIntruder(client3 ; #16:Number ; #17:Number), 
-(client2 ; #14:Number ; #15:Number), 
-(client3 ; #16:Number ; #17:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#14:Number xorc #15:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; #8:Number ; (#16:Number xorc h(exp(#8:Number,
    x1))) ; #9:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#19:Number), 
generatedByIntruder(#21:Number), 
generatedByIntruder(client2 ; #18:Msg), 
generatedByIntruder(client3 ; #20:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#14:Number xorc
    #15:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; #8:Number ; (
    #16:Number xorc h(exp(#8:Number, x1))) ; #9:PubKey))), 
-(client2 ; #18:Msg), 
-(#19:Number), 
-(client3 ; #20:Msg), 
-(#21:Number)
|| 
nil
|| 
nil)
< 1 . 576 . 1 . 1 . 1 . 4 > 
:: #0:Fresh,#1:Fresh,#2:Fresh ::
[ nil | 
   +(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
   -(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
   -(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
   +(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    exp(g, r1)), 
   -(client2 ; #11:Hash ; #12:Number), 
   -(client3 ; #13:Hash ; #14:Number), 
   +(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
   -(client2 ; #15:Number ; #16:Number), 
   -(client3 ; #17:Number ; #18:Number), 
   +(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
   +(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ;
    h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number
    xorc #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(
    #8:Gen, #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
   -(client2 ; #19:Msg), 
   -(#20:Number), 
   -(client3 ; #21:Msg), 
   -(#22:Number), nil] 
|| 
x1 !inI,
#20:Number !inI,
#22:Number !inI,
(client2 ; #19:Msg) !inI,
(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey) !inI,
(client2 ; #11:Hash ; #12:Number) !inI,
(client2 ; #15:Number ; #16:Number) !inI,
(client3 ; #21:Msg) !inI,
(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey) !inI,
(client3 ; #13:Hash ; #14:Number) !inI,
(client3 ; #17:Number ; #18:Number) !inI
|| 
+(client1 ; h(k1) ; exp(g, x1) ; genPubClient1), 
generatedByIntruder(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
generatedByIntruder(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
-(client2 ; #3:Hash ; exp(#4:Gen, #5:Number) ; #6:PubKey), 
-(client3 ; #7:Hash ; exp(#8:Gen, #9:Number) ; #10:PubKey), 
+(client1 ; h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; exp(g,
    r1)), 
generatedByIntruder(client2 ; #11:Hash ; #12:Number), 
generatedByIntruder(client3 ; #13:Hash ; #14:Number), 
-(client2 ; #11:Hash ; #12:Number), 
-(client3 ; #13:Hash ; #14:Number), 
+(client1 ; (k1 xorc h(exp(#4:Gen, x1 * #5:Number))) ; h(exp(#4:Gen, x1 *
    #5:Number)) xorc h(exp(#8:Gen, x1 * #9:Number))), 
generatedByIntruder(client2 ; #15:Number ; #16:Number), 
generatedByIntruder(client3 ; #17:Number ; #18:Number), 
-(client2 ; #15:Number ; #16:Number), 
-(client3 ; #17:Number ; #18:Number), 
+(client1 ; sign(genPrivClient1, h(h(client1 ; client2 ; client3 ; h(k1) ;
    #3:Hash ; #7:Hash) ; h(exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen,
    #5:Number) ; (#15:Number xorc #16:Number xorc h(exp(#4:Gen, x1 *
    #5:Number))) ; #6:PubKey ; exp(#8:Gen, #9:Number) ; (#17:Number xorc h(exp(
    #8:Gen, x1 * #9:Number))) ; #10:PubKey)))), 
generatedByIntruder(x1), 
generatedByIntruder(#20:Number), 
generatedByIntruder(#22:Number), 
generatedByIntruder(client2 ; #19:Msg), 
generatedByIntruder(client3 ; #21:Msg), 
+(r1 - x1 * h(h(client1 ; client2 ; client3 ; h(k1) ; #3:Hash ; #7:Hash) ; h(
    exp(g, x1) ; k1 ; genPubClient1 ; exp(#4:Gen, #5:Number) ; (#15:Number xorc
    #16:Number xorc h(exp(#4:Gen, x1 * #5:Number))) ; #6:PubKey ; exp(#8:Gen,
    #9:Number) ; (#17:Number xorc h(exp(#8:Gen, x1 * #9:Number))) ;
    #10:PubKey))), 
-(client2 ; #19:Msg), 
-(#20:Number), 
-(client3 ; #21:Msg), 
-(#22:Number)
|| 
nil
|| 
nil
Maude> Bye.
