Timing:
real    33m30.173s
user    33m29.446s
sys     0m0.604s
		     
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec  9 2010 18:28:39
	    Copyright 1997-2010 SRI International
		   Wed Dec  3 23:07:37 2014
Maude> 
	    Full Maude 2.5b January 14th 2011


	    Maude-NPA Version: 11/26/2011
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 1417156633 in 2008101ms cpu (2008100ms real) (705719 rewrites/second)
result GrammarList: (errorNoHeuristicApplied {
grl #0:Number inL => (#1:Number xorc #0:Number) inL .,none,
grl #0:Number inL => (#1:Number,#0:Number) inL .,none,
grl (#3:Number * #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq getPub(#4:PrivKey)), (#0:Number notLeq h(#5:Msg)), (
    #0:Number notLeq n(intruder, #6:Fresh)), (#0:Number notLeq genPriv(
    intruder, #7:Fresh)), (#0:Number notLeq exp(#8:Gen, #9:Number)), (#0:Number
    notLeq #10:Number + #11:Number), (#0:Number notLeq (#12:Number -
    #13:Number)), (#0:Number notLeq #14:Number xorc #15:Number), (#3:Number *
    #0:Number) notLeq #16:Number * #17:Number => (#1:Number,#0:Number) inL .}
    usingGrammar 
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq 0), (#0:Number
    notLeq getPub(#1:PrivKey)), (#0:Number notLeq h(#2:Msg)), (#0:Number notLeq
    n(intruder, #3:Fresh)), (#0:Number notLeq genPriv(intruder, #4:Fresh)), (
    #0:Number notLeq exp(#5:Gen, #6:Number)), (#0:Number notLeq #7:Number *
    #8:Number), (#0:Number notLeq #9:Number + #10:Number), (#0:Number notLeq (
    #11:Number - #12:Number)), #0:Number notLeq #13:Number xorc #14:Number => (
    #0:Number * #15:Number) inL . ; 
grl (#1:Number * #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq getPub(#2:PrivKey)), (#0:Number notLeq h(#3:Msg)), (
    #0:Number notLeq n(intruder, #4:Fresh)), (#0:Number notLeq genPriv(
    intruder, #5:Fresh)), (#0:Number notLeq exp(#6:Gen, #7:Number)), (#0:Number
    notLeq #8:Number + #9:Number), (#0:Number notLeq (#10:Number -
    #11:Number)), (#0:Number notLeq #12:Number xorc #13:Number), (#1:Number *
    #0:Number) notLeq #14:Number * #15:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number * #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number * #2:Number) inL .)
| (errorNoHeuristicApplied {
grl #0:Number inL => (#1:Number xorc #0:Number) inL .,none,
grl #0:Number inL => (#1:Number,#0:Number) inL .,none,
grl (#3:Number + #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq getPub(#4:PrivKey)), (#0:Number notLeq h(#5:Msg)), (
    #0:Number notLeq n(intruder, #6:Fresh)), (#0:Number notLeq genPriv(
    intruder, #7:Fresh)), (#0:Number notLeq exp(#8:Gen, #9:Number)), (#0:Number
    notLeq #10:Number * #11:Number), (#0:Number notLeq (#12:Number -
    #13:Number)), (#0:Number notLeq #14:Number xorc #15:Number), (#3:Number +
    #0:Number) notLeq #16:Number + #17:Number => (#1:Number,#0:Number) inL .}
    usingGrammar 
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq 0), (#0:Number
    notLeq getPub(#1:PrivKey)), (#0:Number notLeq h(#2:Msg)), (#0:Number notLeq
    n(intruder, #3:Fresh)), (#0:Number notLeq genPriv(intruder, #4:Fresh)), (
    #0:Number notLeq exp(#5:Gen, #6:Number)), (#0:Number notLeq #7:Number *
    #8:Number), (#0:Number notLeq #9:Number + #10:Number), (#0:Number notLeq (
    #11:Number - #12:Number)), #0:Number notLeq #13:Number xorc #14:Number => (
    #0:Number + #15:Number) inL . ; 
grl (#1:Number + #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq getPub(#2:PrivKey)), (#0:Number notLeq h(#3:Msg)), (
    #0:Number notLeq n(intruder, #4:Fresh)), (#0:Number notLeq genPriv(
    intruder, #5:Fresh)), (#0:Number notLeq exp(#6:Gen, #7:Number)), (#0:Number
    notLeq #8:Number * #9:Number), (#0:Number notLeq (#10:Number -
    #11:Number)), (#0:Number notLeq #12:Number xorc #13:Number), (#1:Number +
    #0:Number) notLeq #14:Number + #15:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number + #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number + #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => (#0:Number - #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => (#1:Number - #0:Number) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number - #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number - #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq sid), (#0:Msg notLeq h(client1 ; 0 ; Hello)),
    (#0:Msg notLeq h(client2 ; 0 ; Hi)), (#0:Msg notLeq h(client3 ; #1:Hash ;
    WillWeMeet)), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg notLeq enc(
    sessKey, Hi)), #0:Msg notLeq enc(sessKey, WillWeMeet) => (#0:Msg ; #2:Msg)
    inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey,
    Hello)), (#0:Msg notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey,
    WillWeMeet)), (#0:Msg notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ;
    Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #2:Hash)), (#0:Msg
    notLeq sign(s3, client3 ; sid ; h(client3 ; #3:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi)
    ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi) ; enc(
    sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sid ; h(client3 ; #4:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(client3 ; #5:Hash ;
    WillWeMeet) ; #5:Hash ; enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ;
    h(client3 ; #5:Hash ; WillWeMeet) ; enc(sessKey, WillWeMeet))), (#0:Msg
    notLeq LostMsgReq ; #6:Hash), (#0:Msg notLeq LostMsgReq ; #7:Hash ; sign(
    s2, client2 ; LostMsgReq ; #7:Hash)), (#0:Msg notLeq LostMsgResponse ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ;
    sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq #8:Hash ; enc(sessKey, WillWeMeet) ;
    sign(s3, client3 ; sid ; h(client3 ; #8:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq #9:Hash ; sign(s2, client2 ; LostMsgReq ;
    #9:Hash)), (#0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1,
    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq h(client3 ; #10:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(client3 ;
    #11:Hash ; WillWeMeet) ; #11:Hash ; enc(sessKey, WillWeMeet) ; sign(s3,
    client3 ; sid ; h(client3 ; #11:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1, client1 ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey, Hi) ; sign(
    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), #0:Msg notLeq
    enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #12:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)) => (#13:Msg ; #0:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq h(client1 ; 0 ; Hello)), (#0:Msg notLeq enc(
    sessKey, Hello)), (#0:Msg notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq sign(s1, client1 ; sid ; h(client1 ;
    0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #1:Hash)), (#0:Msg
    notLeq sign(s3, client3 ; sid ; h(client3 ; #2:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi)
    ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi) ; enc(
    sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sid ; h(client3 ; #3:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(client3 ; #4:Hash ;
    WillWeMeet) ; #4:Hash ; enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ;
    h(client3 ; #4:Hash ; WillWeMeet) ; enc(sessKey, WillWeMeet))), (#0:Msg
    notLeq LostMsgReq ; #5:Hash), (#0:Msg notLeq LostMsgReq ; #6:Hash ; sign(
    s2, client2 ; LostMsgReq ; #6:Hash)), (#0:Msg notLeq LostMsgResponse ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ;
    sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq #7:Hash ; enc(sessKey, WillWeMeet) ;
    sign(s3, client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq #8:Hash ; sign(s2, client2 ; LostMsgReq ;
    #8:Hash)), (#0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1,
    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq h(client3 ; #9:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(client3 ;
    #10:Hash ; WillWeMeet) ; #10:Hash ; enc(sessKey, WillWeMeet) ; sign(s3,
    client3 ; sid ; h(client3 ; #10:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1, client1 ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey, Hi) ; sign(
    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), #0:Msg notLeq
    enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #11:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)) => (#0:Msg ; enc(sessKey, Hello) ;
    #12:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq h(client1 ; 0 ; Hello)), (#0:Msg notLeq enc(
    sessKey, Hello)), (#0:Msg notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq sign(s1, client1 ; sid ; h(client1 ;
    0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #1:Hash)), (#0:Msg
    notLeq sign(s3, client3 ; sid ; h(client3 ; #2:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi)
    ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; 0 ; Hi) ; enc(
    sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
    Hi))), (#0:Msg notLeq sid ; h(client3 ; #3:Hash ; WillWeMeet) ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(client3 ; #4:Hash ;
    WillWeMeet) ; #4:Hash ; enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ;
    h(client3 ; #4:Hash ; WillWeMeet) ; enc(sessKey, WillWeMeet))), (#0:Msg
    notLeq LostMsgReq ; #5:Hash), (#0:Msg notLeq LostMsgReq ; #6:Hash ; sign(
    s2, client2 ; LostMsgReq ; #6:Hash)), (#0:Msg notLeq LostMsgResponse ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ;
    sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello))), (#0:Msg notLeq #7:Hash ; enc(sessKey, WillWeMeet) ;
    sign(s3, client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq #8:Hash ; sign(s2, client2 ; LostMsgReq ;
    #8:Hash)), (#0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1,
    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ;
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
    #0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq h(client3 ; #9:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(client3 ;
    #10:Hash ; WillWeMeet) ; #10:Hash ; enc(sessKey, WillWeMeet) ; sign(s3,
    client3 ; sid ; h(client3 ; #10:Hash ; WillWeMeet) ; enc(sessKey,
    WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1, client1 ; sid
    ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(
    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey, Hi) ; sign(
    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), #0:Msg notLeq
    enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #11:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet)) => (#0:Msg ; enc(sessKey,
    WillWeMeet) ; #12:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (errorNoHeuristicApplied {
grl #0:Number inL => (#1:Number xorc #0:Number) inL .,none,
grl #0:Number inL => (#1:Number,#0:Number) inL .,none,
grl (#3:Number xorc #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq
    getPub(#4:PrivKey)), (#0:Number notLeq h(#5:Msg)), (#0:Number notLeq n(
    intruder, #6:Fresh)), (#0:Number notLeq genPriv(intruder, #7:Fresh)), (
    #0:Number notLeq exp(#8:Gen, #9:Number)), (#0:Number notLeq #10:Number *
    #11:Number), (#0:Number notLeq #12:Number + #13:Number), (#0:Number notLeq
    (#14:Number - #15:Number)), (#3:Number xorc #0:Number) notLeq #16:Number
    xorc #17:Number => (#1:Number,#0:Number) inL .} usingGrammar 
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq getPub(
    #1:PrivKey)), (#0:Number notLeq h(#2:Msg)), (#0:Number notLeq n(intruder,
    #3:Fresh)), (#0:Number notLeq genPriv(intruder, #4:Fresh)), (#0:Number
    notLeq exp(#5:Gen, #6:Number)), (#0:Number notLeq #7:Number * #8:Number), (
    #0:Number notLeq #9:Number + #10:Number), (#0:Number notLeq (#11:Number -
    #12:Number)), #0:Number notLeq #13:Number xorc #14:Number => (#0:Number
    xorc #15:Number) inL . ; 
grl (#1:Number xorc #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq
    getPub(#2:PrivKey)), (#0:Number notLeq h(#3:Msg)), (#0:Number notLeq n(
    intruder, #4:Fresh)), (#0:Number notLeq genPriv(intruder, #5:Fresh)), (
    #0:Number notLeq exp(#6:Gen, #7:Number)), (#0:Number notLeq #8:Number *
    #9:Number), (#0:Number notLeq #10:Number + #11:Number), (#0:Number notLeq (
    #12:Number - #13:Number)), (#1:Number xorc #0:Number) notLeq #14:Number
    xorc #15:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number xorc #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number xorc #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI => dec(#0:SimmKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => dec(#1:SimmKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => dec(#1:SimmKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .} usingGrammar 
grl empty => dec(#1:SimmKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI, #0:SimmKey notLeq sessKey => enc(#0:SimmKey, #1:Msg) inL
    .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq Hello), (#0:Msg notLeq Hi), #0:Msg notLeq
    WillWeMeet => enc(#1:SimmKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => enc(#1:SimmKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .} usingGrammar 
grl empty => enc(#1:SimmKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => exp(#0:Number, #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => exp(#1:Number, #0:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl exp(#0:Number, #1:Number) notLeq exp(#2:Gen, #3:Number) => exp(#0:Number,
    #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PrivKey inL => (#1:Number xorc #0:PrivKey) inL . ; 
grl genPriv(#0:Name, #1:Fresh) notLeq genPriv(intruder, #2:Fresh) => genPriv(
    #0:Name, #1:Fresh) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PubKey inL => (#1:Number xorc #0:PubKey) inL . ; 
grl #0:PrivKey notInI => getPub(#0:PrivKey) inL .)
| (errorNoHeuristicApplied {
grl empty => getPub(#1:PrivKey) inL .,none,
grl empty => #1:PrivKey inL .,none,
grl empty => #1:PrivKey inL .} usingGrammar 
grl empty => getPub(#1:PrivKey) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Hash inL => (#0:Hash xorc #1:Number) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq client1 ; 0 ; Hello), (#0:Msg notLeq client2
    ; 0 ; Hi), #0:Msg notLeq client3 ; #1:Hash ; WillWeMeet => h(#0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => h(#1:Msg) inL .,none,
grl empty => #1:Msg inL .,none,
grl empty => #1:Msg inL .} usingGrammar 
grl empty => h(#1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Nonce inL => (#1:Number xorc #0:Nonce) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq n(intruder, #2:Fresh) => n(#0:Name, #1:Fresh)
    inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PrivKey notInI, (#0:PrivKey notLeq s1), (#0:PrivKey notLeq s2),
    #0:PrivKey notLeq s3 => sign(#0:PrivKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello)), (#0:Msg notLeq client1 ; LostMsgResponse ; sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq client2 ; sid ;
    h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq client2 ;
    LostMsgReq ; #1:Hash), #0:Msg notLeq client3 ; sid ; h(client3 ; #2:Hash ;
    WillWeMeet) ; enc(sessKey, WillWeMeet) => sign(#3:PrivKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => sign(#1:PrivKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:PrivKey) inL .,none,
grl empty => (#2:Msg,#1:PrivKey) inL .} usingGrammar 
grl empty => sign(#1:PrivKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PubKey notInI => sverify(#0:PubKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => sverify(#1:PubKey, #0:Msg) inL .)
| errorNoHeuristicApplied {
grl empty => sverify(#1:PubKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:PubKey) inL .,none,
grl empty => (#2:Msg,#1:PubKey) inL .} usingGrammar 
grl empty => sverify(#1:PubKey, #2:Msg) inL .
Maude> Bye.
