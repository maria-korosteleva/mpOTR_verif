		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec  9 2010 18:28:39
	    Copyright 1997-2010 SRI International
		   Sun Feb  8 16:25:31 2015
Maude> 
	    Maude-NPA Version: 11/26/2011
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 158340988 in 408888ms cpu (409458ms real) (387247 rewrites/second)
result GrammarList: (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq 0), (#0:Number
    notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (#0:Number notLeq
    genPubClient1), (#0:Number notLeq genPubClient2), (#0:Number notLeq
    genPubClient3), (#0:Number notLeq h(#1:Msg)), (#0:Number notLeq n(intruder,
    #2:Fresh)), (#0:Number notLeq exp(#3:Gen, #4:Number)), (#0:Number notLeq
    #5:Number * #6:Number), (#0:Number notLeq #7:Number + #8:Number), (
    #0:Number notLeq (#9:Number - #10:Number)), #0:Number notLeq #11:Number
    xorc #12:Number => (#13:Number * #0:Number) inL . ; 
grl (#1:Number * #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (
    #0:Number notLeq genPubClient1), (#0:Number notLeq genPubClient2), (
    #0:Number notLeq genPubClient3), (#0:Number notLeq h(#2:Msg)), (#0:Number
    notLeq n(intruder, #3:Fresh)), (#0:Number notLeq exp(#4:Gen, #5:Number)), (
    #0:Number notLeq #6:Number + #7:Number), (#0:Number notLeq (#8:Number -
    #9:Number)), (#0:Number notLeq #10:Number xorc #11:Number), (#1:Number *
    #0:Number) notLeq #12:Number * #13:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number * #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number * #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq 0), (#0:Number
    notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (#0:Number notLeq
    genPubClient1), (#0:Number notLeq genPubClient2), (#0:Number notLeq
    genPubClient3), (#0:Number notLeq h(#1:Msg)), (#0:Number notLeq n(intruder,
    #2:Fresh)), (#0:Number notLeq exp(#3:Gen, #4:Number)), (#0:Number notLeq
    #5:Number * #6:Number), (#0:Number notLeq #7:Number + #8:Number), (
    #0:Number notLeq (#9:Number - #10:Number)), #0:Number notLeq #11:Number
    xorc #12:Number => (#13:Number + #0:Number) inL . ; 
grl (#1:Number + #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq 0),
    (#0:Number notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (
    #0:Number notLeq genPubClient1), (#0:Number notLeq genPubClient2), (
    #0:Number notLeq genPubClient3), (#0:Number notLeq h(#2:Msg)), (#0:Number
    notLeq n(intruder, #3:Fresh)), (#0:Number notLeq exp(#4:Gen, #5:Number)), (
    #0:Number notLeq #6:Number * #7:Number), (#0:Number notLeq (#8:Number -
    #9:Number)), (#0:Number notLeq #10:Number xorc #11:Number), (#1:Number +
    #0:Number) notLeq #12:Number + #13:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number + #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number + #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI, #0:Number notLeq r3 => (#0:Number - #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI, (#0:Number notLeq x3 * h(h(client1 ; client2 ; client3 ;
    #1:Hash ; #2:Hash ; h(k3)) ; h((#3:Number ; (#4:Number xorc #5:Number xorc
    h(exp(#3:Number, x3))) ; #6:PubKey) ; (#7:Number ; (#8:Number xorc h(exp(
    #7:Number, x3))) ; #9:PubKey) ; exp(g, x3) ; k3 ; genPubClient3))), (
    #0:Number notLeq x3 * h(h(client1 ; client2 ; client3 ; #10:Hash ; #11:Hash
    ; h(k3)) ; h((#12:Number ; (#13:Number xorc #14:Number xorc h(exp(
    #12:Number, x3))) ; #15:PubKey) ; (exp(#16:Gen, #17:Number) ; (#18:Number
    xorc h(exp(#16:Gen, x3 * #17:Number))) ; #19:PubKey) ; exp(g, x3) ; k3 ;
    genPubClient3))), (#0:Number notLeq x3 * h(h(client1 ; client2 ; client3 ;
    #20:Hash ; #21:Hash ; h(k3)) ; h((exp(#22:Gen, #23:Number) ; (#24:Number
    xorc #25:Number xorc h(exp(#22:Gen, x3 * #23:Number))) ; #26:PubKey) ; (
    #27:Number ; (#28:Number xorc h(exp(#27:Number, x3))) ; #29:PubKey) ; exp(
    g, x3) ; k3 ; genPubClient3))), #0:Number notLeq x3 * h(h(client1 ; client2
    ; client3 ; #30:Hash ; #31:Hash ; h(k3)) ; h((exp(#32:Gen, #33:Number) ; (
    #34:Number xorc #35:Number xorc h(exp(#32:Gen, x3 * #33:Number))) ;
    #36:PubKey) ; (exp(#37:Gen, #38:Number) ; (#39:Number xorc h(exp(#37:Gen,
    x3 * #38:Number))) ; #40:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)) => (
    #41:Number - #0:Number) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number - #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number - #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => (#0:Msg ; #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq sign(genPrivClient3, h(h(client1 ; client2 ;
    client3 ; #1:Hash ; #2:Hash ; h(k3)) ; h((#3:Number ; (#4:Number xorc
    #5:Number xorc h(exp(#3:Number, x3))) ; #6:PubKey) ; (#7:Number ; (
    #8:Number xorc h(exp(#7:Number, x3))) ; #9:PubKey) ; exp(g, x3) ; k3 ;
    genPubClient3)))), (#0:Msg notLeq sign(genPrivClient3, h(h(client1 ;
    client2 ; client3 ; #10:Hash ; #11:Hash ; h(k3)) ; h((#12:Number ; (
    #13:Number xorc #14:Number xorc h(exp(#12:Number, x3))) ; #15:PubKey) ; (
    exp(#16:Gen, #17:Number) ; (#18:Number xorc h(exp(#16:Gen, x3 *
    #17:Number))) ; #19:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)))), (#0:Msg
    notLeq sign(genPrivClient3, h(h(client1 ; client2 ; client3 ; #20:Hash ;
    #21:Hash ; h(k3)) ; h((exp(#22:Gen, #23:Number) ; (#24:Number xorc
    #25:Number xorc h(exp(#22:Gen, x3 * #23:Number))) ; #26:PubKey) ; (
    #27:Number ; (#28:Number xorc h(exp(#27:Number, x3))) ; #29:PubKey) ; exp(
    g, x3) ; k3 ; genPubClient3)))), #0:Msg notLeq sign(genPrivClient3, h(h(
    client1 ; client2 ; client3 ; #30:Hash ; #31:Hash ; h(k3)) ; h((exp(
    #32:Gen, #33:Number) ; (#34:Number xorc #35:Number xorc h(exp(#32:Gen, x3 *
    #33:Number))) ; #36:PubKey) ; (exp(#37:Gen, #38:Number) ; (#39:Number xorc
    h(exp(#37:Gen, x3 * #38:Number))) ; #40:PubKey) ; exp(g, x3) ; k3 ;
    genPubClient3))) => (#41:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI, (#0:Number notLeq g), (#0:Number notLeq 0), (#0:Number
    notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (#0:Number notLeq
    genPubClient1), (#0:Number notLeq genPubClient2), (#0:Number notLeq
    genPubClient3), (#0:Number notLeq h(#1:Msg)), (#0:Number notLeq n(intruder,
    #2:Fresh)), (#0:Number notLeq exp(#3:Gen, #4:Number)), (#0:Number notLeq
    #5:Number * #6:Number), (#0:Number notLeq #7:Number + #8:Number), (
    #0:Number notLeq (#9:Number - #10:Number)), #0:Number notLeq #11:Number
    xorc #12:Number => (#13:Number xorc #0:Number) inL . ; 
grl (#1:Number xorc #0:Number) notInI, (#0:Number notLeq g), (#0:Number notLeq
    0), (#0:Number notLeq x1), (#0:Number notLeq x2), (#0:Number notLeq x3), (
    #0:Number notLeq genPubClient1), (#0:Number notLeq genPubClient2), (
    #0:Number notLeq genPubClient3), (#0:Number notLeq h(#2:Msg)), (#0:Number
    notLeq n(intruder, #3:Fresh)), (#0:Number notLeq exp(#4:Gen, #5:Number)), (
    #0:Number notLeq #6:Number * #7:Number), (#0:Number notLeq #8:Number +
    #9:Number), (#0:Number notLeq (#10:Number - #11:Number)), (#1:Number xorc
    #0:Number) notLeq #12:Number xorc #13:Number => #0:Number inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Number xorc #2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .,none,
grl empty => (#1:Number,#2:Number) inL .} usingGrammar 
grl empty => (#1:Number xorc #2:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI => dec(#0:SimmKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => dec(#1:SimmKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => dec(#1:SimmKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .} usingGrammar 
grl empty => dec(#1:SimmKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI => enc(#0:SimmKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => enc(#1:SimmKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => enc(#1:SimmKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .} usingGrammar 
grl empty => enc(#1:SimmKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI => exp(#0:Number, #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number notInI => exp(#1:Number, #0:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl exp(#0:Number, #1:Number) notLeq exp(#2:Gen, #3:Number) => exp(#0:Number,
    #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq h(client1 ; client2 ; client3 ; #1:Hash ;
    #2:Hash ; h(k3)) ; h((#3:Number ; (#4:Number xorc #5:Number xorc h(exp(
    #3:Number, x3))) ; #6:PubKey) ; (#7:Number ; (#8:Number xorc h(exp(
    #7:Number, x3))) ; #9:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)), (#0:Msg
    notLeq h(client1 ; client2 ; client3 ; #10:Hash ; #11:Hash ; h(k3)) ; h((
    #12:Number ; (#13:Number xorc #14:Number xorc h(exp(#12:Number, x3))) ;
    #15:PubKey) ; (exp(#16:Gen, #17:Number) ; (#18:Number xorc h(exp(#16:Gen,
    x3 * #17:Number))) ; #19:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)), (
    #0:Msg notLeq h(client1 ; client2 ; client3 ; #20:Hash ; #21:Hash ; h(k3))
    ; h((exp(#22:Gen, #23:Number) ; (#24:Number xorc #25:Number xorc h(exp(
    #22:Gen, x3 * #23:Number))) ; #26:PubKey) ; (#27:Number ; (#28:Number xorc
    h(exp(#27:Number, x3))) ; #29:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)),
    #0:Msg notLeq h(client1 ; client2 ; client3 ; #30:Hash ; #31:Hash ; h(k3))
    ; h((exp(#32:Gen, #33:Number) ; (#34:Number xorc #35:Number xorc h(exp(
    #32:Gen, x3 * #33:Number))) ; #36:PubKey) ; (exp(#37:Gen, #38:Number) ; (
    #39:Number xorc h(exp(#37:Gen, x3 * #38:Number))) ; #40:PubKey) ; exp(g,
    x3) ; k3 ; genPubClient3) => h(#0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => h(#1:Msg) inL .,none,
grl empty => #1:Msg inL .,none,
grl empty => #1:Msg inL .} usingGrammar 
grl empty => h(#1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq n(intruder, #2:Fresh) => n(#0:Name, #1:Fresh)
    inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PrivKey notInI, #0:PrivKey notLeq genPrivClient3 => sign(#0:PrivKey,
    #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq h(h(client1 ; client2 ; client3 ; #1:Hash ;
    #2:Hash ; h(k3)) ; h((#3:Number ; (#4:Number xorc #5:Number xorc h(exp(
    #3:Number, x3))) ; #6:PubKey) ; (#7:Number ; (#8:Number xorc h(exp(
    #7:Number, x3))) ; #9:PubKey) ; exp(g, x3) ; k3 ; genPubClient3))), (#0:Msg
    notLeq h(h(client1 ; client2 ; client3 ; #10:Hash ; #11:Hash ; h(k3)) ; h((
    #12:Number ; (#13:Number xorc #14:Number xorc h(exp(#12:Number, x3))) ;
    #15:PubKey) ; (exp(#16:Gen, #17:Number) ; (#18:Number xorc h(exp(#16:Gen,
    x3 * #17:Number))) ; #19:PubKey) ; exp(g, x3) ; k3 ; genPubClient3))), (
    #0:Msg notLeq h(h(client1 ; client2 ; client3 ; #20:Hash ; #21:Hash ; h(
    k3)) ; h((exp(#22:Gen, #23:Number) ; (#24:Number xorc #25:Number xorc h(
    exp(#22:Gen, x3 * #23:Number))) ; #26:PubKey) ; (#27:Number ; (#28:Number
    xorc h(exp(#27:Number, x3))) ; #29:PubKey) ; exp(g, x3) ; k3 ;
    genPubClient3))), #0:Msg notLeq h(h(client1 ; client2 ; client3 ; #30:Hash
    ; #31:Hash ; h(k3)) ; h((exp(#32:Gen, #33:Number) ; (#34:Number xorc
    #35:Number xorc h(exp(#32:Gen, x3 * #33:Number))) ; #36:PubKey) ; (exp(
    #37:Gen, #38:Number) ; (#39:Number xorc h(exp(#37:Gen, x3 * #38:Number))) ;
    #40:PubKey) ; exp(g, x3) ; k3 ; genPubClient3)) => sign(#41:PrivKey,
    #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => sign(#1:PrivKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:PrivKey) inL .,none,
grl empty => (#2:Msg,#1:PrivKey) inL .} usingGrammar 
grl empty => sign(#1:PrivKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PubKey notInI => sverify(#0:PubKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => sverify(#1:PubKey, #0:Msg) inL .)
| errorNoHeuristicApplied {
grl empty => sverify(#1:PubKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:PubKey) inL .,none,
grl empty => (#2:Msg,#1:PubKey) inL .} usingGrammar 
grl empty => sverify(#1:PubKey, #2:Msg) inL .
Maude> Bye.
