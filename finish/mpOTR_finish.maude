***(
	These are the first steps towards mpOTR protocol verification and security
	analysis.
	This module describes the Communication Setup phase of the main course of
	the protocol that is as follows:

		Client-1 --> Client-2 : Client-1 ; Fx-Mess
		Client-1 --> Client-3 : Client-1 ; Fx-Mess
		Client-2 --> Client-1 : Client-2 ; Fx-Mess
		Client-2 --> Client-3 : Client-2 ; Fx-Mess
		Client-3 --> Client-1 : Client-3 ; Fx-Mess
		Client-3 --> Client-2 : Client-3 ; Fx-Mess
	
	where Clients represent people (or, more spesificly, their chat clients)
	wishing to interact with each other, Mess is some pre-defined message equal
	for all clients. Number of clients represents multi-party property of mpOTR.
	
	No algebraic properties reqiered.
)***

--- protocol syntax - types and operations
fmod PROTOCOL-EXAMPLE-SYMBOLS is
	--- Importing sorts Msg, Fresh, Public
	protecting DEFINITION-PROTOCOL-RULES .

	--- Sort Information
	sorts Name FixedMessage .
	subsort Name FixedMessage < Msg .
	subsort Name < Public . --- means that Name info is publicly availible
	subsort FixedMessage < Public .

	--- Principals -- name constants
	ops client-1 client-2 client-3 intruder : -> Name .

	--- [Get] Fixed Message
	op fxMess : -> FixedMessage .

	--- Concatenation
	op _;_ : Msg Msg -> Msg [frozen gather (e E)] . --- operator prop-es-see man

endfm

--- Algebraic properties of the protocol
fmod PROTOCOL-EXAMPLE-ALGBRAIC is
	protecting PROTOCOL-EXAMPLE-SYMBOLS .

endfm

--- Protocol strands (what's that?)
fmod PROTOCOL-SPECIFICATION is
	protecting PROTOCOL-EXAMPLE-SYMBOLS .
	protecting DEFINITION-PROTOCOL-RULES .
	protecting DEFINITION-CONSTRAINTS-INPUT .

	vars M1, M2 : Msg .
	var fM : FixedMessage .
	var N Name1 Name2 : Name .
	
	--- Actions an intruder can perform
	eq STRANDS-DOLEVYAO =
		:: nil :: [ nil | -(M1 ; M2), +(M1), nil ] &
		:: nil :: [ nil | -(M1 ; M2), +(M2), nil ] &
		:: nil :: [ nil | -(M1), -(M2), +(M1 ; M2), nil ] &
		:: nil :: [ nil | +(fM), nil ] &
		:: nil :: [ nil | +(N), nil ]
	[nonexec] .

	eq STRANDS-PROTOCOL =
		:: nil :: --- vars of sort Fresh are explicit
		[nil | +(client-1 ; fxMess),
			   -(client-2 ; fxMess),
			   -(client-3 ; fxMess), nil]
		&
		:: nil ::
		[nil | -(client-1 ; fxMess),
			   +(client-2 ; fxMess),
			   -(client-3 ; fxMess), nil]
		&
		:: nil ::
		[nil | -(client-1 ; fxMess),
			   -(client-2 ; fxMess),
			   +(client-3 ; fxMess), nil]
	[nonexec] .

	--- eq EXTRA-GRAMMARS --- increase performance = cut the search tree.
	--- [nonexec] .

	eq ATTACK-STATE(0) = 
	  	empty
		|| empty
		|| nil
		|| nil
		|| nil 
	[nonexec] .

	eq ATTACK-STATE(1) = 
		:: nil ::
		[nil,  -(Name1 ; fxMess),
			   +(client-2 ; fxMess),
			   -(Name2 ; fxMess) | nil]
		|| Name1 != client-1 
		|| nil
		|| nil
		|| nil
	[nonexec] .
	
	eq ATTACK-STATE(2) =
		:: nil ::
		[nil,  -(Name1 ; fxMess),
			   +(client-2 ; fxMess),
			   -(Name2 ; fxMess) | nil]
		|| Name2 != client-3 
		|| nil
		|| nil
		|| nil
	[nonexec] .

	***(eq ATTACK-STATE(3) =
		:: nil ::
		[nil,  -(Name1 ; fxMess),
			   +(client-2 ; fxMess),
			   -(Name2 ; fxMess) | nil]
		|| Name1 != client-1, 
		   Name2 != client-3
		|| nil
		|| nil
		|| nil
	[nonexec] .)***

endfm


--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
