***(
	These are the first steps towards mpOTR protocol verification and security
	analysis.
	This module focuses on the Communication and Shutdown phases of mpOTR with
	attacks on the second one.
	You can have a look at the phases descriptions online:
	http://mpotr.secsem.ru/mpOTRDev/CommunicationPhase
	http://mpotr.secsem.ru/mpOTRDev/Shutdown%20Phase

	The basic version of Communication Phase message is simple ---
	it a tuple
	      +(clientID, sid, C, sign)
		where sid is a session ID, C is a chypher text of the desired message 
		with the session key usage, sign is a signature of tuple (sid, C), 
		that is created using ephemeral signature key.
	However, to ensure the transcript soundness, we gonna use the OldBlue
	protocol (http://matt.singlethink.net/projects/mpotr/oldblue-draft.pdf),
	and add messageId and parentIDs to the basic version 
	of Communication Phase message as follows:
	      +(clientID, sid, mID, mpID0, ..mpID(n-1), C, sign)
		where sid is a session ID, mID is a current message's ID, mpIDi 
		for i=0..(n-1) are the parents messages IDs, C is a chypher text 
		of the desired message with the session key usage, sign is 
		a signature of tuple (sid, mID, mpID0, ..mpID(n-1), C), 
		that is created using ephemeral signature key.
		Message Id's are generated as a digest over the author, the ids of all
		causal predecessors (or 0 if that's the first one), 
		and the message payload (in this order).
		
	We descibe parts of the OldBlue	protocol through the messages' transcript
	modeling different possible situations. 

	The Shutdown phase is quite simple. We just need to 
	1. Ensure the transcript soundness and indicate the start of shutdown 
	   phase sending message with shutdown flag and empy payload. 
	2. Make confirmation check (to ensure that none of the shutdown flags 
	   were losted) 
	3. Publish (send in plaintext) private ephemeral keys.
	
	To represent the multy-party property of mpOTR we gonna use three 
	CLients that represent people (or, more spesificly, their chat clients)
	wishing to interact with each other.
	
	Algebraic properties are those for exponent, exlusive-or operation, 
	encription and decription properties, signing and signature 
	verifying (the fmods PROTOCOL-EXAMPLE-SYMBOLS and 
	PROTOCOL-EXAMPLE-ALGEBRAIC) -- same as in the Authentication part.

)***

--- protocol syntax - types and operations
fmod PROTOCOL-EXAMPLE-SYMBOLS is
	--- Importing sorts Msg, Fresh, Public
	protecting DEFINITION-PROTOCOL-RULES .

	--- Sort Information
	sorts Name Nonce Number Gen Key Hash PubKey PrivKey SimmKey LTPrivKey FixedMessage .
	subsort Gen Key Hash Nonce < Number .
	subsort Name Number Key Hash < Msg .
	subsort PubKey PrivKey SimmKey LTPrivKey < Key .
	subsort Name < Public . --- means that Name info is publicly availible
	subsort Gen FixedMessage < Public .
	
	--- Principals -- name constants
	ops client1 client2 client3 intruder : -> Name .
  	op g : -> Gen . --- Group generator
	op 0 : -> Number . 
	ops x1 x2 x3 : -> LTPrivKey .
	op sessKey : -> SimmKey . --- session Key
	op sid : -> Hash . --- Session ID
	ops Hello Hi HowAreYou Fine Ok What Where WillWeMeet Yes No AtTheCafe : -> Msg . --- some Examples
	ops LostMsgReq LostMsgResponse Shutdown ShutdownConfirm : -> FixedMessage . --- special messages
	ops s1 s2 s3 : -> PrivKey .

	--- Nonce operator
	op n : Name Fresh -> Nonce [frozen] .

	--- Encryption
  	op enc : SimmKey Msg -> Msg [frozen] .
  	op dec : SimmKey Msg -> Msg [frozen] .
	
	--- Singature
	op genPriv : Name Fresh -> PrivKey [frozen] .
	op getPub : PrivKey -> PubKey [frozen] .
	op sign : PrivKey Msg -> Msg [frozen] .
	op sverify : PubKey Msg -> Msg [frozen] .
	
	--- Hash function
	op h : Msg -> Hash [frozen] .

  	--- Exponent
  	op exp : Number Number -> Number [frozen] .
	
  	--- Multiplication
  	op _*_ : Number Number -> Number [frozen assoc comm] .

	--- Sum
  	op _+_ : Number Number -> Number [frozen assoc comm] .
	
	--- Sub
  	op _-_ : Number Number -> Number [frozen] .

	--- xorc
	op _xorc_ : Number Number -> Number [frozen assoc comm] .
	
	--- Concatenation
	op _;_ : Msg Msg -> Msg [frozen gather (e E)] . --- operator prop-es - see manual

endfm

--- Algebraic properties of the protocol
fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
	protecting PROTOCOL-EXAMPLE-SYMBOLS .
  
	--- exponent's property
  	eq exp(exp(W:Gen,Y:Number),Z:Number) 
   	= exp(W:Gen, Y:Number * Z:Number) [nonexec metadata "variant"] .
	---eq exp(W:Gen,0) = 1 [nonexec metadata "variant"] .
  
  	--- key encription property
  	eq enc(K:SimmKey,dec(K:SimmKey,M:Msg)) = M:Msg [nonexec metadata "variant"] .
  	eq dec(K:SimmKey,enc(K:SimmKey,M:Msg)) = M:Msg [nonexec metadata "variant"] .
  	
	--- signature key encription property
	eq sverify(kpub:PubKey, sign(kpriv:PrivKey, M:Msg)) 
	= M:Msg [nonexec metadata "variant"] .
		--- not really sure about this one - don't like the terminology 
	eq sign(kpriv:PrivKey, sverify(kpub:PubKey, M:Msg)) 
	= M:Msg [nonexec metadata "variant"] . 

	--- xorc properties -- will this be logical xorc of bit xorc?
	eq X:Number xorc X:Number xorc Y:Number = Y:Number [nonexec metadata "variant"] .
	eq X:Number xorc X:Number = 0 [nonexec metadata "variant"] .
	eq X:Number xorc 0 = X:Number [nonexec metadata "variant"] .

endfm

--- Protocol strands (what's that?)
fmod PROTOCOL-SPECIFICATION is
	protecting PROTOCOL-EXAMPLE-SYMBOLS .
	protecting DEFINITION-PROTOCOL-RULES .
	protecting DEFINITION-CONSTRAINTS-INPUT .

	vars M M1 M2 : Msg .
	var Ke : SimmKey .
	vars kpub S1 S2 S3 : PubKey .
	var kpriv : PrivKey .
	--- vars s1 s2 s3 : PrivKey .
	vars Num Num1 Num2 Num3 : Number .
	vars N Name1 Name2 : Name .
	vars GE : Gen .
	--- vars x1 x2 x3 : Number . --- secret ones
	vars y1 y2 y3 z1 z2 z3 : Number . 
	vars T1 T2 T3 : Number .
	vars k1_tr1 k2_tr2 k3_tr3 : Number .
	vars d1 d2 d3 : Number .
	vars k1 k2 k3 : Number . --- for simmkey Generation
	vars fr fr_k fr_r fr_s : Fresh .
	vars k1_h k2_h k3_h sid1 sid2 sid3 : Hash .
	vars c1_signed c2_signed c3_signed : Msg .
	--- signatures and messagies
	--- The first digit is the client's number, the second - number of the message 
	vars idM11 idM12 idM13 idM21 idM22 idM23 idM31 idM32 idM33 : Hash .
	vars sigM11 sigM12 sigM13 sigM21 sigM22 sigM23 sigM31 sigM32 sigM33 : Msg .
	vars sigM21Req : Msg .
	vars sigM11Response : Msg .
	vars sig11Shutdown sig21Shutdown sig31Shutdown : Msg .
	vars sig12Shutdown sig22Shutdown sig32Shutdown : Msg .

	--- Actions an intruder can perform
	eq STRANDS-DOLEVYAO =
	    --- concatenation
		:: nil :: [ nil | -(M1 ; M2), +(M1), nil ] &
		:: nil :: [ nil | -(M1 ; M2), +(M2), nil ] &
		:: nil :: [ nil | -(M1), -(M2), +(M1 ; M2), nil ] &
     	:: nil :: [ nil | -(Ke), -(M), +(enc(Ke,M)), nil ] &
     	:: nil :: [ nil | -(Ke), -(M), +(dec(Ke,M)), nil ] &
     	:: nil :: [ nil | -(GE), -(Num), +(exp(GE,Num)), nil ] &
     	:: nil :: [ nil | -(M), +(h(M)), nil ] &
     	:: nil :: [ nil | -(kpriv), -(M), +(sign(kpriv,M)), nil ] &
     	:: nil :: [ nil | -(kpub), -(M), +(sverify(kpub,M)), nil ] &
     	:: nil :: [ nil | -(Num1), -(Num2), +(Num1 * Num2), nil ] &
     	:: nil :: [ nil | -(Num1), -(Num2), +(Num1 + Num2), nil ] &
     	:: nil :: [ nil | -(Num1), -(Num2), +(Num1 - Num2), nil ] &
     	:: nil :: [ nil | -(Num1), -(Num2), +(Num1 xorc Num2), nil ] &
     	:: fr ::  [ nil | +(n(intruder,fr)), nil ] &
     	:: fr ::  [ nil | +(genPriv(intruder, fr)), nil ] &
     	:: nil :: [ nil | -(kpriv), +(getPub( kpriv)), nil ] &
     	:: nil :: [ nil | +(g), nil ] &
     	:: nil :: [ nil | +(0), nil ] &
     	:: nil :: [ nil | +(N), nil ]
	[nonexec] .

	eq STRANDS-PROTOCOL =
		--- client1 ---
		:: nil :: 
		[nil | +(client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			   -(client2 ; sid ; idM21 ; enc(sessKey, Hi) ; sigM21),
			   -(client3 ; sid ; idM31 ; idM11 ; enc(sessKey, WillWeMeet) ; sigM31),
			   -(client2 ; LostMsgReq ; idM11 ; sigM21Req),
			   +(client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			 --- Shutdown phase ---  
			 --- Start ---
			   +(client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31 ; sign(s1, (client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31))), --- No payload
			   -(client2 ; Shutdown ; sid ; idM22 ; idM12 ; idM21 ; idM31 ; sig21Shutdown),
			   -(client3 ; Shutdown ; sid ; idM32 ; idM22 ; sig31Shutdown),
			 --- Confirm ---
			   +(client1 ; ShutdownConfirm ; sid ; sign(s1, (client1 ; ShutdownConfirm ; sid))), 
			   -(client2 ; ShutdownConfirm ; sid ; sig22Shutdown), 
			   -(client3 ; ShutdownConfirm ; sid ; sig32Shutdown), 
			 --- Publish ---
			   +(client1 ; s1),
			   -(client2 ; s2),
			   -(client3 ; s3),
			   nil ]
		&	
		--- client2 ---
		:: nil :: 
		[nil | --- client2 has not recieved the client1's first message
			   +(client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, (client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)))),
			   -(client3 ; sid ; idM31 ; idM11 ; enc(sessKey, WillWeMeet) ; sigM31),
			   --- realises that client2 do not have the idM11 message!
			   +(client2 ; LostMsgReq ; idM11 ; sign(s2, (client2 ; LostMsgReq ; idM11))),
			   -(client1 ; LostMsgResponse ; sid ; idM11 ; enc(sessKey, Hello) ; sigM11Response),
			 --- Shutdown phase ---  
			 --- Start ---
			   -(client1 ; Shutdown ; sid ; idM12 ; idM21 ; idM31 ; sig11Shutdown),
			   +(client2 ; Shutdown ; sid ; h(client2 ; idM12 ; h(client2 ; 0 ; Hi) ; idM31) ; idM12 ; h(client2 ; 0 ; Hi) ; idM31 ; sign(s2, (client2 ; Shutdown ; sid ; h(client2 ; idM12 ; h(client2 ; 0 ; Hi) ; idM31) ; idM12 ; h(client2 ; 0 ; Hi) ; idM31))),
			   -(client3 ; Shutdown ; sid ; idM32 ; idM22 ; sig31Shutdown),
			 --- Confirm ---
			   -(client1 ; ShutdownConfirm ; sid ; sig12Shutdown), 
			   +(client2 ; ShutdownConfirm ; sid ; sign(s2, (client2 ; ShutdownConfirm ; sid))), 
			   -(client3 ; ShutdownConfirm ; sid ; sig32Shutdown), 
			 --- Publish ---
			   -(client1 ; s1),
			   +(client2 ; s2),
			   -(client3 ; s3),
			   nil ]
		&
		--- client3 ---
		:: nil :: 
		[nil | -(client1 ; sid ; idM11 ; enc(sessKey, Hello) ; sigM11),
			   +(client3 ; sid ; h(client3 ; idM11 ; WillWeMeet) ; idM11 ; enc(sessKey, WillWeMeet) ; sign(s3, (client3 ; sid ; h(client3 ; idM11 ; WillWeMeet) ; idM11 ; enc(sessKey, WillWeMeet)))),
			   -(client2 ; sid ; idM21 ; enc(sessKey, Hi) ; sigM21),
			   -(client2 ; LostMsgReq ; idM11 ; sigM21Req),
			   -(client1 ; LostMsgResponse ; sid ; idM11 ; enc(sessKey, Hello) ; sigM11),
			 --- Shutdown phase ---  
			 --- Start ---
			   -(client1 ; Shutdown ; sid ; idM12 ; idM21 ; idM31 ; sig11Shutdown),
			   -(client2 ; Shutdown ; sid ; idM22 ; idM12 ; idM21 ; idM31 ; sig21Shutdown),
			   +(client3 ; Shutdown ; sid ; h(client3 ; idM22) ; idM22 ; sign(s3, (client3 ; Shutdown ; sid ; h(client1 ; idM22) ; idM22))), 
			 --- Confirm ---
			   -(client1 ; ShutdownConfirm ; sid ; sig12Shutdown), 
			   -(client2 ; ShutdownConfirm ; sid ; sig22Shutdown), 
			   +(client3 ; ShutdownConfirm ; sid ; sign(s3, (client3 ; ShutdownConfirm ; sid))), 
			 --- Publish ---
			   -(client1 ; s1),
			   -(client2 ; s2),
			   +(client3 ; s3),
			   nil ] 
	[nonexec] .
	
	--- eq EXTRA-GRAMMARS --- increase performance = cut the search tree.
	--- [nonexec] .

	eq GENERATED-GRAMMARS =
		(
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
		grl #0:Number notInI => (#0:Number - #1:Number) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
		grl #0:Number notInI => (#1:Number - #0:Number) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq sid), (#0:Msg notLeq h(client1 ; #1:Hash)), (
		    #0:Msg notLeq h(client1 ; 0 ; Hello)), (#0:Msg notLeq h(client1 ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi)), (#0:Msg notLeq h(client2 ;
		    #4:Hash ; h(client2 ; 0 ; Hi) ; #5:Hash)), (#0:Msg notLeq h(client3 ;
		    #6:Hash)), (#0:Msg notLeq h(client3 ; #7:Hash ; WillWeMeet)), (#0:Msg
		    notLeq enc(sessKey, Hello)), (#0:Msg notLeq enc(sessKey, Hi)), #0:Msg
		    notLeq enc(sessKey, WillWeMeet) => (#0:Msg ; #8:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
		    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
		    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
		    notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello))), (#0:Msg notLeq sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #2:Hash ; #3:Hash) ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
		    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #4:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #5:Hash ; h(client2
		    ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3,
		    client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1
		    ; #8:Hash) ; #8:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; h(client1 ; #9:Hash) ; #9:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #10:Hash
		    ; #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq sid ; h(client1 ;
		    #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash ; sign(s1, client1 ; Shutdown ;
		    sid ; h(client1 ; #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash)), (#0:Msg
		    notLeq sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ;
		    h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2
		    ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #14:Hash ;
		    h(client2 ; 0 ; Hi) ; #15:Hash) ; #14:Hash ; h(client2 ; 0 ; Hi) ;
		    #15:Hash), (#0:Msg notLeq sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi)
		    ; #17:Hash) ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash) ;
		    #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #18:Hash) ; #18:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #18:Hash) ; #18:Hash)), (#0:Msg notLeq sid ; h(client3 ; #19:Hash ;
		    WillWeMeet) ; #19:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(
		    client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq LostMsgReq ; #21:Hash), (#0:Msg
		    notLeq LostMsgReq ; #22:Hash ; sign(s2, client2 ; LostMsgReq ; #22:Hash)),
		    (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq Shutdown ;
		    sid ; h(client1 ; #23:Hash) ; #23:Hash), (#0:Msg notLeq Shutdown ; sid ; h(
		    client1 ; #24:Hash ; #25:Hash) ; #24:Hash ; #25:Hash), (#0:Msg notLeq
		    Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ; #26:Hash ; #27:Hash ;
		    sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ;
		    #26:Hash ; #27:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #28:Hash
		    ; h(client2 ; 0 ; Hi) ; #29:Hash) ; #28:Hash ; h(client2 ; 0 ; Hi) ;
		    #29:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2
		    ; 0 ; Hi) ; #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash ; sign(
		    s2, client2 ; Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2 ; 0 ; Hi) ;
		    #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash)), (#0:Msg notLeq
		    Shutdown ; sid ; h(client3 ; #32:Hash) ; #32:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #32:Hash) ; #32:Hash)), (#0:Msg notLeq
		    ShutdownConfirm ; sid), (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s1,
		    client1 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm ; sid ;
		    sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm
		    ; sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq #33:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #34:Hash ; enc(sessKey,
		    WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #34:Hash ; WillWeMeet) ;
		    #34:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq #36:Hash ; #37:Hash),
		    (#0:Msg notLeq #35:Hash ; sign(s2, client2 ; LostMsgReq ; #35:Hash)), (
		    #0:Msg notLeq #38:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #39:Hash ; #38:Hash) ; #39:Hash ; #38:Hash)), (#0:Msg notLeq #40:Hash ;
		    #41:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #40:Hash ;
		    #41:Hash) ; #40:Hash ; #41:Hash)), (#0:Msg notLeq #42:Hash ; sign(s2,
		    client2 ; Shutdown ; sid ; h(client2 ; #43:Hash ; h(client2 ; 0 ; Hi) ;
		    #42:Hash) ; #43:Hash ; h(client2 ; 0 ; Hi) ; #42:Hash)), (#0:Msg notLeq
		    #44:Hash ; h(client2 ; 0 ; Hi) ; #45:Hash), (#0:Msg notLeq #46:Hash ; h(
		    client2 ; 0 ; Hi) ; #47:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(
		    client2 ; #46:Hash ; h(client2 ; 0 ; Hi) ; #47:Hash) ; #46:Hash ; h(client2
		    ; 0 ; Hi) ; #47:Hash)), (#0:Msg notLeq #48:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #48:Hash) ; #48:Hash)), (#0:Msg notLeq h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1
		    ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; #49:Hash ;
		    #50:Hash) ; #49:Hash ; #50:Hash), (#0:Msg notLeq h(client1 ; #51:Hash ;
		    #52:Hash) ; #51:Hash ; #52:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #51:Hash ; #52:Hash) ; #51:Hash ; #52:Hash)), (#0:Msg notLeq h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ;
		    #53:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #54:Hash ; h(
		    client2 ; 0 ; Hi) ; #53:Hash) ; #54:Hash ; h(client2 ; 0 ; Hi) ;
		    #53:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(
		    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg
		    notLeq h(client2 ; #55:Hash ; h(client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ;
		    h(client2 ; 0 ; Hi) ; #56:Hash), (#0:Msg notLeq h(client2 ; #57:Hash ; h(
		    client2 ; 0 ; Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #57:Hash ; h(client2 ; 0 ;
		    Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash)), (#0:Msg
		    notLeq h(client3 ; #59:Hash) ; #59:Hash ; sign(s3, client3 ; Shutdown ; sid
		    ; h(client1 ; #59:Hash) ; #59:Hash)), (#0:Msg notLeq h(client3 ; #60:Hash ;
		    WillWeMeet) ; #60:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(
		    client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #62:Hash ; WillWeMeet) ; #62:Hash ; enc(sessKey, WillWeMeet)) => (
		    Shutdown ; sid ; #0:Msg ; #63:Hash ; #64:Hash ; #65:Hash ; #66:Msg) inL . ;
		    
		grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
		    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
		    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
		    notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello))), (#0:Msg notLeq sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #2:Hash ; #3:Hash) ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
		    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #4:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #5:Hash ; h(client2
		    ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3,
		    client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1
		    ; #8:Hash) ; #8:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; h(client1 ; #9:Hash) ; #9:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #10:Hash
		    ; #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq sid ; h(client1 ;
		    #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash ; sign(s1, client1 ; Shutdown ;
		    sid ; h(client1 ; #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash)), (#0:Msg
		    notLeq sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ;
		    h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2
		    ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #14:Hash ;
		    h(client2 ; 0 ; Hi) ; #15:Hash) ; #14:Hash ; h(client2 ; 0 ; Hi) ;
		    #15:Hash), (#0:Msg notLeq sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi)
		    ; #17:Hash) ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash) ;
		    #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #18:Hash) ; #18:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #18:Hash) ; #18:Hash)), (#0:Msg notLeq sid ; h(client3 ; #19:Hash ;
		    WillWeMeet) ; #19:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(
		    client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq LostMsgReq ; #21:Hash), (#0:Msg
		    notLeq LostMsgReq ; #22:Hash ; sign(s2, client2 ; LostMsgReq ; #22:Hash)),
		    (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq Shutdown ;
		    sid ; h(client1 ; #23:Hash) ; #23:Hash), (#0:Msg notLeq Shutdown ; sid ; h(
		    client1 ; #24:Hash ; #25:Hash) ; #24:Hash ; #25:Hash), (#0:Msg notLeq
		    Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ; #26:Hash ; #27:Hash ;
		    sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ;
		    #26:Hash ; #27:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #28:Hash
		    ; h(client2 ; 0 ; Hi) ; #29:Hash) ; #28:Hash ; h(client2 ; 0 ; Hi) ;
		    #29:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2
		    ; 0 ; Hi) ; #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash ; sign(
		    s2, client2 ; Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2 ; 0 ; Hi) ;
		    #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash)), (#0:Msg notLeq
		    Shutdown ; sid ; h(client3 ; #32:Hash) ; #32:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #32:Hash) ; #32:Hash)), (#0:Msg notLeq
		    ShutdownConfirm ; sid), (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s1,
		    client1 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm ; sid ;
		    sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm
		    ; sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq #33:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #34:Hash ; enc(sessKey,
		    WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #34:Hash ; WillWeMeet) ;
		    #34:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq #36:Hash ; #37:Hash),
		    (#0:Msg notLeq #35:Hash ; sign(s2, client2 ; LostMsgReq ; #35:Hash)), (
		    #0:Msg notLeq #38:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #39:Hash ; #38:Hash) ; #39:Hash ; #38:Hash)), (#0:Msg notLeq #40:Hash ;
		    #41:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #40:Hash ;
		    #41:Hash) ; #40:Hash ; #41:Hash)), (#0:Msg notLeq #42:Hash ; sign(s2,
		    client2 ; Shutdown ; sid ; h(client2 ; #43:Hash ; h(client2 ; 0 ; Hi) ;
		    #42:Hash) ; #43:Hash ; h(client2 ; 0 ; Hi) ; #42:Hash)), (#0:Msg notLeq
		    #44:Hash ; h(client2 ; 0 ; Hi) ; #45:Hash), (#0:Msg notLeq #46:Hash ; h(
		    client2 ; 0 ; Hi) ; #47:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(
		    client2 ; #46:Hash ; h(client2 ; 0 ; Hi) ; #47:Hash) ; #46:Hash ; h(client2
		    ; 0 ; Hi) ; #47:Hash)), (#0:Msg notLeq #48:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #48:Hash) ; #48:Hash)), (#0:Msg notLeq h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1
		    ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; #49:Hash ;
		    #50:Hash) ; #49:Hash ; #50:Hash), (#0:Msg notLeq h(client1 ; #51:Hash ;
		    #52:Hash) ; #51:Hash ; #52:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #51:Hash ; #52:Hash) ; #51:Hash ; #52:Hash)), (#0:Msg notLeq h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ;
		    #53:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #54:Hash ; h(
		    client2 ; 0 ; Hi) ; #53:Hash) ; #54:Hash ; h(client2 ; 0 ; Hi) ;
		    #53:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(
		    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg
		    notLeq h(client2 ; #55:Hash ; h(client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ;
		    h(client2 ; 0 ; Hi) ; #56:Hash), (#0:Msg notLeq h(client2 ; #57:Hash ; h(
		    client2 ; 0 ; Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #57:Hash ; h(client2 ; 0 ;
		    Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash)), (#0:Msg
		    notLeq h(client3 ; #59:Hash) ; #59:Hash ; sign(s3, client3 ; Shutdown ; sid
		    ; h(client1 ; #59:Hash) ; #59:Hash)), (#0:Msg notLeq h(client3 ; #60:Hash ;
		    WillWeMeet) ; #60:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(
		    client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #62:Hash ; WillWeMeet) ; #62:Hash ; enc(sessKey, WillWeMeet)) => (
		    Shutdown ; sid ; #63:Hash ; #64:Hash ; #0:Msg ; #65:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
		    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
		    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
		    notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello))), (#0:Msg notLeq sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #2:Hash ; #3:Hash) ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
		    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #4:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #5:Hash ; h(client2
		    ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3,
		    client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1
		    ; #8:Hash) ; #8:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; h(client1 ; #9:Hash) ; #9:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #10:Hash
		    ; #11:Hash) ; #10:Hash ; #11:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #10:Hash ; #11:Hash) ; #10:Hash ; #11:Hash)), (#0:Msg notLeq sid
		    ; h(client1 ; #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash), (#0:Msg notLeq
		    sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
		    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #14:Hash ;
		    h(client2 ; 0 ; Hi) ; #15:Hash) ; #14:Hash ; h(client2 ; 0 ; Hi) ;
		    #15:Hash), (#0:Msg notLeq sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi)
		    ; #17:Hash) ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash) ;
		    #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #18:Hash) ; #18:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #18:Hash) ; #18:Hash)), (#0:Msg notLeq sid ; h(client3 ; #19:Hash ;
		    WillWeMeet) ; #19:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(
		    client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq LostMsgReq ; #21:Hash), (#0:Msg
		    notLeq LostMsgReq ; #22:Hash ; sign(s2, client2 ; LostMsgReq ; #22:Hash)),
		    (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq Shutdown ;
		    sid ; h(client1 ; #23:Hash) ; #23:Hash), (#0:Msg notLeq Shutdown ; sid ; h(
		    client1 ; #24:Hash ; #25:Hash) ; #24:Hash ; #25:Hash), (#0:Msg notLeq
		    Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ; #26:Hash ; #27:Hash ;
		    sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ;
		    #26:Hash ; #27:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #28:Hash
		    ; h(client2 ; 0 ; Hi) ; #29:Hash) ; #28:Hash ; h(client2 ; 0 ; Hi) ;
		    #29:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2
		    ; 0 ; Hi) ; #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash ; sign(
		    s2, client2 ; Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2 ; 0 ; Hi) ;
		    #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash)), (#0:Msg notLeq
		    Shutdown ; sid ; h(client3 ; #32:Hash) ; #32:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #32:Hash) ; #32:Hash)), (#0:Msg notLeq
		    ShutdownConfirm ; sid), (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s1,
		    client1 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm ; sid ;
		    sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm
		    ; sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq #33:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #34:Hash ; enc(sessKey,
		    WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #34:Hash ; WillWeMeet) ;
		    #34:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq #36:Hash ; #37:Hash),
		    (#0:Msg notLeq #35:Hash ; sign(s2, client2 ; LostMsgReq ; #35:Hash)), (
		    #0:Msg notLeq #38:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #39:Hash ; #38:Hash) ; #39:Hash ; #38:Hash)), (#0:Msg notLeq #40:Hash ;
		    #41:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #40:Hash ;
		    #41:Hash) ; #40:Hash ; #41:Hash)), (#0:Msg notLeq #42:Hash ; sign(s2,
		    client2 ; Shutdown ; sid ; h(client2 ; #43:Hash ; h(client2 ; 0 ; Hi) ;
		    #42:Hash) ; #43:Hash ; h(client2 ; 0 ; Hi) ; #42:Hash)), (#0:Msg notLeq
		    #44:Hash ; h(client2 ; 0 ; Hi) ; #45:Hash), (#0:Msg notLeq #46:Hash ; h(
		    client2 ; 0 ; Hi) ; #47:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(
		    client2 ; #46:Hash ; h(client2 ; 0 ; Hi) ; #47:Hash) ; #46:Hash ; h(client2
		    ; 0 ; Hi) ; #47:Hash)), (#0:Msg notLeq #48:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #48:Hash) ; #48:Hash)), (#0:Msg notLeq h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1
		    ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; #49:Hash ;
		    #50:Hash) ; #49:Hash ; #50:Hash), (#0:Msg notLeq h(client1 ; #51:Hash ;
		    #52:Hash) ; #51:Hash ; #52:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #51:Hash ; #52:Hash) ; #51:Hash ; #52:Hash)), (#0:Msg notLeq h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ;
		    #53:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #54:Hash ; h(
		    client2 ; 0 ; Hi) ; #53:Hash) ; #54:Hash ; h(client2 ; 0 ; Hi) ;
		    #53:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(
		    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg
		    notLeq h(client2 ; #55:Hash ; h(client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ;
		    h(client2 ; 0 ; Hi) ; #56:Hash), (#0:Msg notLeq h(client2 ; #57:Hash ; h(
		    client2 ; 0 ; Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #57:Hash ; h(client2 ; 0 ;
		    Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash)), (#0:Msg
		    notLeq h(client3 ; #59:Hash) ; #59:Hash ; sign(s3, client3 ; Shutdown ; sid
		    ; h(client1 ; #59:Hash) ; #59:Hash)), (#0:Msg notLeq h(client3 ; #60:Hash ;
		    WillWeMeet) ; #60:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(
		    client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #62:Hash ; WillWeMeet) ; #62:Hash ; enc(sessKey, WillWeMeet)) => (sid ;
		    #0:Msg ; #63:Hash ; enc(sessKey, WillWeMeet) ; #64:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
		    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
		    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
		    notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello))), (#0:Msg notLeq sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #2:Hash ; #3:Hash) ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
		    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #4:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #5:Hash ; h(client2
		    ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3,
		    client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1
		    ; #8:Hash) ; #8:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; h(client1 ; #9:Hash) ; #9:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #10:Hash
		    ; #11:Hash) ; #10:Hash ; #11:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #10:Hash ; #11:Hash) ; #10:Hash ; #11:Hash)), (#0:Msg notLeq sid
		    ; h(client1 ; #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash), (#0:Msg notLeq
		    sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
		    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #14:Hash ;
		    h(client2 ; 0 ; Hi) ; #15:Hash) ; #14:Hash ; h(client2 ; 0 ; Hi) ;
		    #15:Hash), (#0:Msg notLeq sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi)
		    ; #17:Hash) ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash) ;
		    #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #18:Hash) ; #18:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #18:Hash) ; #18:Hash)), (#0:Msg notLeq sid ; h(client3 ; #19:Hash ;
		    WillWeMeet) ; #19:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(
		    client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq LostMsgReq ; #21:Hash), (#0:Msg
		    notLeq LostMsgReq ; #22:Hash ; sign(s2, client2 ; LostMsgReq ; #22:Hash)),
		    (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq Shutdown ;
		    sid ; h(client1 ; #23:Hash) ; #23:Hash), (#0:Msg notLeq Shutdown ; sid ; h(
		    client1 ; #24:Hash ; #25:Hash) ; #24:Hash ; #25:Hash), (#0:Msg notLeq
		    Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ; #26:Hash ; #27:Hash ;
		    sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ;
		    #26:Hash ; #27:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #28:Hash
		    ; h(client2 ; 0 ; Hi) ; #29:Hash) ; #28:Hash ; h(client2 ; 0 ; Hi) ;
		    #29:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2
		    ; 0 ; Hi) ; #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash ; sign(
		    s2, client2 ; Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2 ; 0 ; Hi) ;
		    #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash)), (#0:Msg notLeq
		    Shutdown ; sid ; h(client3 ; #32:Hash) ; #32:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #32:Hash) ; #32:Hash)), (#0:Msg notLeq
		    ShutdownConfirm ; sid), (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s1,
		    client1 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm ; sid ;
		    sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm
		    ; sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq #33:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #34:Hash ; enc(sessKey,
		    WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #34:Hash ; WillWeMeet) ;
		    #34:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq #36:Hash ; #37:Hash),
		    (#0:Msg notLeq #35:Hash ; sign(s2, client2 ; LostMsgReq ; #35:Hash)), (
		    #0:Msg notLeq #38:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #39:Hash ; #38:Hash) ; #39:Hash ; #38:Hash)), (#0:Msg notLeq #40:Hash ;
		    #41:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #40:Hash ;
		    #41:Hash) ; #40:Hash ; #41:Hash)), (#0:Msg notLeq #42:Hash ; sign(s2,
		    client2 ; Shutdown ; sid ; h(client2 ; #43:Hash ; h(client2 ; 0 ; Hi) ;
		    #42:Hash) ; #43:Hash ; h(client2 ; 0 ; Hi) ; #42:Hash)), (#0:Msg notLeq
		    #44:Hash ; h(client2 ; 0 ; Hi) ; #45:Hash), (#0:Msg notLeq #46:Hash ; h(
		    client2 ; 0 ; Hi) ; #47:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(
		    client2 ; #46:Hash ; h(client2 ; 0 ; Hi) ; #47:Hash) ; #46:Hash ; h(client2
		    ; 0 ; Hi) ; #47:Hash)), (#0:Msg notLeq #48:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #48:Hash) ; #48:Hash)), (#0:Msg notLeq h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1
		    ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; #49:Hash ;
		    #50:Hash) ; #49:Hash ; #50:Hash), (#0:Msg notLeq h(client1 ; #51:Hash ;
		    #52:Hash) ; #51:Hash ; #52:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #51:Hash ; #52:Hash) ; #51:Hash ; #52:Hash)), (#0:Msg notLeq h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ;
		    #53:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #54:Hash ; h(
		    client2 ; 0 ; Hi) ; #53:Hash) ; #54:Hash ; h(client2 ; 0 ; Hi) ;
		    #53:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(
		    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg
		    notLeq h(client2 ; #55:Hash ; h(client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ;
		    h(client2 ; 0 ; Hi) ; #56:Hash), (#0:Msg notLeq h(client2 ; #57:Hash ; h(
		    client2 ; 0 ; Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #57:Hash ; h(client2 ; 0 ;
		    Hi) ; #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash)), (#0:Msg
		    notLeq h(client3 ; #59:Hash) ; #59:Hash ; sign(s3, client3 ; Shutdown ; sid
		    ; h(client1 ; #59:Hash) ; #59:Hash)), (#0:Msg notLeq h(client3 ; #60:Hash ;
		    WillWeMeet) ; #60:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(
		    client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #61:Hash ; WillWeMeet) ; #61:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #62:Hash ; WillWeMeet) ; #62:Hash ; enc(sessKey, WillWeMeet)) => (sid ;
		    #63:Hash ; #0:Msg ; enc(sessKey, WillWeMeet) ; #64:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
		    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
		    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
		    notLeq sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello))), (#0:Msg notLeq sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #2:Hash ; #3:Hash) ; #2:Hash ;
		    #3:Hash)), (#0:Msg notLeq sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey,
		    Hi))), (#0:Msg notLeq sign(s2, client2 ; LostMsgReq ; #4:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #5:Hash ; h(client2
		    ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash)), (#0:Msg
		    notLeq sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3,
		    client3 ; sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1
		    ; #8:Hash) ; #8:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; h(client1 ; #9:Hash) ; #9:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #10:Hash
		    ; #11:Hash) ; #10:Hash ; #11:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(
		    client1 ; #10:Hash ; #11:Hash) ; #10:Hash ; #11:Hash)), (#0:Msg notLeq sid
		    ; h(client1 ; #12:Hash ; #13:Hash) ; #12:Hash ; #13:Hash), (#0:Msg notLeq
		    sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2 ;
		    0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #14:Hash ;
		    h(client2 ; 0 ; Hi) ; #15:Hash) ; #14:Hash ; h(client2 ; 0 ; Hi) ;
		    #15:Hash), (#0:Msg notLeq sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi)
		    ; #17:Hash) ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash) ;
		    #16:Hash ; h(client2 ; 0 ; Hi) ; #17:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #18:Hash) ; #18:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #18:Hash) ; #18:Hash)), (#0:Msg notLeq sid ; h(client3 ; #19:Hash ;
		    WillWeMeet) ; #19:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq sid ; h(
		    client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #20:Hash ; WillWeMeet) ; #20:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq LostMsgReq ; #21:Hash), (#0:Msg
		    notLeq LostMsgReq ; #22:Hash ; sign(s2, client2 ; LostMsgReq ; #22:Hash)),
		    (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq Shutdown ;
		    sid ; h(client1 ; #23:Hash) ; #23:Hash), (#0:Msg notLeq Shutdown ; sid ; h(
		    client1 ; #24:Hash ; #25:Hash) ; #24:Hash ; #25:Hash), (#0:Msg notLeq
		    Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ; #26:Hash ; #27:Hash ;
		    sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #26:Hash ; #27:Hash) ;
		    #26:Hash ; #27:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #28:Hash
		    ; h(client2 ; 0 ; Hi) ; #29:Hash) ; #28:Hash ; h(client2 ; 0 ; Hi) ;
		    #29:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2
		    ; 0 ; Hi) ; #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash ; sign(
		    s2, client2 ; Shutdown ; sid ; h(client2 ; #30:Hash ; h(client2 ; 0 ; Hi) ;
		    #31:Hash) ; #30:Hash ; h(client2 ; 0 ; Hi) ; #31:Hash)), (#0:Msg notLeq
		    Shutdown ; sid ; h(client3 ; #32:Hash) ; #32:Hash ; sign(s3, client3 ;
		    Shutdown ; sid ; h(client1 ; #32:Hash) ; #32:Hash)), (#0:Msg notLeq
		    ShutdownConfirm ; sid), (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s1,
		    client1 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm ; sid ;
		    sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq ShutdownConfirm
		    ; sid ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq #33:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #34:Hash ; enc(sessKey,
		    WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #34:Hash ; WillWeMeet) ;
		    #34:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq #36:Hash ; sign(s1,
		    client1 ; Shutdown ; sid ; h(client1 ; #37:Hash ; #36:Hash) ; #37:Hash ;
		    #36:Hash)), (#0:Msg notLeq #35:Hash ; sign(s2, client2 ; LostMsgReq ;
		    #35:Hash)), (#0:Msg notLeq #38:Hash ; #39:Hash), (#0:Msg notLeq #40:Hash ;
		    #41:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #40:Hash ;
		    #41:Hash) ; #40:Hash ; #41:Hash)), (#0:Msg notLeq #42:Hash ; sign(s2,
		    client2 ; Shutdown ; sid ; h(client2 ; #43:Hash ; h(client2 ; 0 ; Hi) ;
		    #42:Hash) ; #43:Hash ; h(client2 ; 0 ; Hi) ; #42:Hash)), (#0:Msg notLeq
		    #44:Hash ; h(client2 ; 0 ; Hi) ; #45:Hash), (#0:Msg notLeq #46:Hash ; sign(
		    s3, client3 ; Shutdown ; sid ; h(client1 ; #46:Hash) ; #46:Hash)), (#0:Msg
		    notLeq #47:Hash ; h(client2 ; 0 ; Hi) ; #48:Hash ; sign(s2, client2 ;
		    Shutdown ; sid ; h(client2 ; #47:Hash ; h(client2 ; 0 ; Hi) ; #48:Hash) ;
		    #47:Hash ; h(client2 ; 0 ; Hi) ; #48:Hash)), (#0:Msg notLeq h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey,
		    Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; #49:Hash ; #50:Hash) ;
		    #49:Hash ; #50:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #49:Hash ; #50:Hash) ; #49:Hash ; #50:Hash)), (#0:Msg notLeq h(client1 ;
		    #51:Hash ; #52:Hash) ; #51:Hash ; #52:Hash), (#0:Msg notLeq h(client2 ; 0 ;
		    Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; #53:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #54:Hash ; h(client2 ; 0 ;
		    Hi) ; #53:Hash) ; #54:Hash ; h(client2 ; 0 ; Hi) ; #53:Hash)), (#0:Msg
		    notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(
		    client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq h(client2 ; #55:Hash
		    ; h(client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ; h(client2 ; 0 ; Hi) ;
		    #56:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #55:Hash ; h(
		    client2 ; 0 ; Hi) ; #56:Hash) ; #55:Hash ; h(client2 ; 0 ; Hi) ;
		    #56:Hash)), (#0:Msg notLeq h(client2 ; #57:Hash ; h(client2 ; 0 ; Hi) ;
		    #58:Hash) ; #57:Hash ; h(client2 ; 0 ; Hi) ; #58:Hash), (#0:Msg notLeq h(
		    client3 ; #59:Hash) ; #59:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(
		    client1 ; #59:Hash) ; #59:Hash)), (#0:Msg notLeq h(client3 ; #60:Hash ;
		    WillWeMeet) ; #60:Hash ; enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid
		    ; h(client3 ; #60:Hash ; WillWeMeet) ; #60:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq h(client3 ; #61:Hash ; WillWeMeet) ; #61:Hash
		    ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #62:Hash ; WillWeMeet) ; #62:Hash ; enc(sessKey, WillWeMeet)) => (#63:Msg
		    ; #0:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq sid), (#0:Msg notLeq s1), (#0:Msg notLeq s2),
		    (#0:Msg notLeq s3), (#0:Msg notLeq h(client1 ; #1:Hash)), (#0:Msg notLeq h(
		    client1 ; 0 ; Hello)), (#0:Msg notLeq h(client1 ; #2:Hash ; #3:Hash)), (
		    #0:Msg notLeq h(client2 ; 0 ; Hi)), (#0:Msg notLeq h(client2 ; #4:Hash ; h(
		    client2 ; 0 ; Hi) ; #5:Hash)), (#0:Msg notLeq h(client3 ; #6:Hash)), (
		    #0:Msg notLeq h(client3 ; #7:Hash ; WillWeMeet)), (#0:Msg notLeq enc(
		    sessKey, Hello)), (#0:Msg notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(
		    sessKey, WillWeMeet)), (#0:Msg notLeq sign(s1, client1 ; sid ; h(client1 ;
		    0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sign(s1, client1 ;
		    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
		    #0:Msg notLeq sign(s1, client1 ; Shutdown ; sid ; h(client1 ; #8:Hash ;
		    #9:Hash) ; #8:Hash ; #9:Hash)), (#0:Msg notLeq sign(s1, client1 ;
		    ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s2, client2 ; sid ; h(client2
		    ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sign(s2, client2 ;
		    LostMsgReq ; #10:Hash)), (#0:Msg notLeq sign(s2, client2 ; Shutdown ; sid ;
		    h(client2 ; #11:Hash ; h(client2 ; 0 ; Hi) ; #12:Hash) ; #11:Hash ; h(
		    client2 ; 0 ; Hi) ; #12:Hash)), (#0:Msg notLeq sign(s2, client2 ;
		    ShutdownConfirm ; sid)), (#0:Msg notLeq sign(s3, client3 ; sid ; h(client3
		    ; #13:Hash ; WillWeMeet) ; #13:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg
		    notLeq sign(s3, client3 ; Shutdown ; sid ; h(client1 ; #14:Hash) ;
		    #14:Hash)), (#0:Msg notLeq sign(s3, client3 ; ShutdownConfirm ; sid)), (
		    #0:Msg notLeq sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq sid ; sign(s2, client2 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid
		    ; sign(s3, client3 ; ShutdownConfirm ; sid)), (#0:Msg notLeq sid ; h(
		    client1 ; #15:Hash) ; #15:Hash), (#0:Msg notLeq sid ; h(client1 ; 0 ;
		    Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello)
		    ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(client1 ; 0 ; Hello) ;
		    enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq sid ; h(client1 ; #16:Hash
		    ; #17:Hash) ; #16:Hash ; #17:Hash), (#0:Msg notLeq sid ; h(client1 ;
		    #18:Hash ; #19:Hash) ; #18:Hash ; #19:Hash ; sign(s1, client1 ; Shutdown ;
		    sid ; h(client1 ; #18:Hash ; #19:Hash) ; #18:Hash ; #19:Hash)), (#0:Msg
		    notLeq sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ;
		    h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(s2, client2 ; sid ; h(client2
		    ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg notLeq sid ; h(client2 ; #20:Hash ;
		    h(client2 ; 0 ; Hi) ; #21:Hash) ; #20:Hash ; h(client2 ; 0 ; Hi) ;
		    #21:Hash), (#0:Msg notLeq sid ; h(client2 ; #22:Hash ; h(client2 ; 0 ; Hi)
		    ; #23:Hash) ; #22:Hash ; h(client2 ; 0 ; Hi) ; #23:Hash ; sign(s2, client2
		    ; Shutdown ; sid ; h(client2 ; #22:Hash ; h(client2 ; 0 ; Hi) ; #23:Hash) ;
		    #22:Hash ; h(client2 ; 0 ; Hi) ; #23:Hash)), (#0:Msg notLeq sid ; h(client3
		    ; #24:Hash) ; #24:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ;
		    #24:Hash) ; #24:Hash)), (#0:Msg notLeq sid ; h(client3 ; #25:Hash ;
		    WillWeMeet) ; #25:Hash ; enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid
		    ; h(client3 ; #25:Hash ; WillWeMeet) ; #25:Hash ; enc(sessKey,
		    WillWeMeet))), (#0:Msg notLeq sid ; h(client3 ; #26:Hash ; WillWeMeet) ;
		    #26:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ;
		    #27:Hash), (#0:Msg notLeq LostMsgReq ; #28:Hash ; sign(s2, client2 ;
		    LostMsgReq ; #28:Hash)), (#0:Msg notLeq LostMsgResponse ; sid ; h(client1 ;
		    0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ;
		    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (
		    #0:Msg notLeq Shutdown ; sid ; h(client1 ; #29:Hash) ; #29:Hash), (#0:Msg
		    notLeq Shutdown ; sid ; h(client1 ; #30:Hash ; #31:Hash) ; #30:Hash ;
		    #31:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #32:Hash ; #33:Hash)
		    ; #32:Hash ; #33:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1 ;
		    #32:Hash ; #33:Hash) ; #32:Hash ; #33:Hash)), (#0:Msg notLeq Shutdown ; sid
		    ; h(client2 ; #34:Hash ; h(client2 ; 0 ; Hi) ; #35:Hash) ; #34:Hash ; h(
		    client2 ; 0 ; Hi) ; #35:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2 ;
		    #36:Hash ; h(client2 ; 0 ; Hi) ; #37:Hash) ; #36:Hash ; h(client2 ; 0 ; Hi)
		    ; #37:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #36:Hash ; h(
		    client2 ; 0 ; Hi) ; #37:Hash) ; #36:Hash ; h(client2 ; 0 ; Hi) ;
		    #37:Hash)), (#0:Msg notLeq Shutdown ; sid ; h(client3 ; #38:Hash) ;
		    #38:Hash ; sign(s3, client3 ; Shutdown ; sid ; h(client1 ; #38:Hash) ;
		    #38:Hash)), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
		    ShutdownConfirm ; sid ; sign(s1, client1 ; ShutdownConfirm ; sid)), (#0:Msg
		    notLeq ShutdownConfirm ; sid ; sign(s2, client2 ; ShutdownConfirm ; sid)),
		    (#0:Msg notLeq ShutdownConfirm ; sid ; sign(s3, client3 ; ShutdownConfirm ;
		    sid)), (#0:Msg notLeq #50:Hash ; h(client2 ; 0 ; Hi) ; #51:Hash), (#0:Msg
		    notLeq #39:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq #40:Hash ; enc(
		    sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3 ; #40:Hash ;
		    WillWeMeet) ; #40:Hash ; enc(sessKey, WillWeMeet))), (#0:Msg notLeq
		    #41:Hash ; sign(s2, client2 ; LostMsgReq ; #41:Hash)), (#0:Msg notLeq
		    #42:Hash ; #43:Hash), (#0:Msg notLeq #44:Hash ; sign(s1, client1 ; Shutdown
		    ; sid ; h(client1 ; #45:Hash ; #44:Hash) ; #45:Hash ; #44:Hash)), (#0:Msg
		    notLeq #46:Hash ; #47:Hash ; sign(s1, client1 ; Shutdown ; sid ; h(client1
		    ; #46:Hash ; #47:Hash) ; #46:Hash ; #47:Hash)), (#0:Msg notLeq #48:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #49:Hash ; h(client2 ; 0 ;
		    Hi) ; #48:Hash) ; #49:Hash ; h(client2 ; 0 ; Hi) ; #48:Hash)), (#0:Msg
		    notLeq #52:Hash ; h(client2 ; 0 ; Hi) ; #53:Hash ; sign(s2, client2 ;
		    Shutdown ; sid ; h(client2 ; #52:Hash ; h(client2 ; 0 ; Hi) ; #53:Hash) ;
		    #52:Hash ; h(client2 ; 0 ; Hi) ; #53:Hash)), (#0:Msg notLeq #54:Hash ;
		    sign(s3, client3 ; Shutdown ; sid ; h(client1 ; #54:Hash) ; #54:Hash)), (
		    #0:Msg notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ; 0
		    ; Hello) ; enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ;
		    h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq h(client1 ;
		    #55:Hash ; #56:Hash) ; #55:Hash ; #56:Hash), (#0:Msg notLeq h(client1 ;
		    #57:Hash ; #58:Hash) ; #57:Hash ; #58:Hash ; sign(s1, client1 ; Shutdown ;
		    sid ; h(client1 ; #57:Hash ; #58:Hash) ; #57:Hash ; #58:Hash)), (#0:Msg
		    notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ;
		    0 ; Hi) ; #59:Hash ; sign(s2, client2 ; Shutdown ; sid ; h(client2 ;
		    #60:Hash ; h(client2 ; 0 ; Hi) ; #59:Hash) ; #60:Hash ; h(client2 ; 0 ; Hi)
		    ; #59:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi) ; enc(sessKey, Hi) ; sign(
		    s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))), (#0:Msg
		    notLeq h(client2 ; #61:Hash ; h(client2 ; 0 ; Hi) ; #62:Hash) ; #61:Hash ;
		    h(client2 ; 0 ; Hi) ; #62:Hash), (#0:Msg notLeq h(client2 ; #63:Hash ; h(
		    client2 ; 0 ; Hi) ; #64:Hash) ; #63:Hash ; h(client2 ; 0 ; Hi) ; #64:Hash ;
		    sign(s2, client2 ; Shutdown ; sid ; h(client2 ; #63:Hash ; h(client2 ; 0 ;
		    Hi) ; #64:Hash) ; #63:Hash ; h(client2 ; 0 ; Hi) ; #64:Hash)), (#0:Msg
		    notLeq h(client3 ; #65:Hash) ; #65:Hash ; sign(s3, client3 ; Shutdown ; sid
		    ; h(client1 ; #65:Hash) ; #65:Hash)), (#0:Msg notLeq h(client3 ; #66:Hash ;
		    WillWeMeet) ; #66:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg notLeq h(
		    client3 ; #67:Hash ; WillWeMeet) ; #67:Hash ; enc(sessKey, WillWeMeet) ;
		    sign(s3, client3 ; sid ; h(client3 ; #67:Hash ; WillWeMeet) ; #67:Hash ;
		    enc(sessKey, WillWeMeet))), (#0:Msg notLeq enc(sessKey, Hello) ; sign(s1,
		    client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg
		    notLeq enc(sessKey, Hello) ; sign(s1, client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello))), (#0:Msg notLeq enc(sessKey,
		    Hi) ; sign(s2, client2 ; sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi))),
		    #0:Msg notLeq enc(sessKey, WillWeMeet) ; sign(s3, client3 ; sid ; h(client3
		    ; #68:Hash ; WillWeMeet) ; #68:Hash ; enc(sessKey, WillWeMeet)) => (#0:Msg
		    ; #69:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:SimmKey notInI => dec(#0:SimmKey, #1:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI => dec(#1:SimmKey, #0:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:SimmKey notInI, #0:SimmKey notLeq sessKey => enc(#0:SimmKey, #1:Msg) inL
		    .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq Hello), (#0:Msg notLeq Hi), #0:Msg notLeq
		    WillWeMeet => enc(#1:SimmKey, #0:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
		grl #0:Number notInI => exp(#0:Number, #1:Number) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
		grl #0:Number notInI => exp(#1:Number, #0:Number) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
		grl exp(#0:Number, #1:Number) notLeq exp(#2:Gen, #3:Number) => exp(#0:Number,
		    #1:Number) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:PrivKey inL => (#1:Number xorc #0:PrivKey) inL . ; 
		grl genPriv(#0:Name, #1:Fresh) notLeq genPriv(intruder, #2:Fresh) => genPriv(
		    #0:Name, #1:Fresh) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:PubKey inL => (#1:Number xorc #0:PubKey) inL . ; 
		grl #0:PrivKey notInI => getPub(#0:PrivKey) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Hash inL => (#0:Hash xorc #1:Number) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq client1 ; #1:Hash), (#0:Msg notLeq client1 ;
		    0 ; Hello), (#0:Msg notLeq client1 ; #2:Hash ; #3:Hash), (#0:Msg notLeq
		    client2 ; 0 ; Hi), (#0:Msg notLeq client2 ; #4:Hash ; h(client2 ; 0 ; Hi) ;
		    #5:Hash), (#0:Msg notLeq client3 ; #6:Hash), #0:Msg notLeq client3 ;
		    #7:Hash ; WillWeMeet => h(#0:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Nonce inL => (#1:Number xorc #0:Nonce) inL . ; 
		grl n(#0:Name, #1:Fresh) notLeq n(intruder, #2:Fresh) => n(#0:Name, #1:Fresh)
		    inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:PrivKey notInI, (#0:PrivKey notLeq s1), (#0:PrivKey notLeq s2),
		    #0:PrivKey notLeq s3 => sign(#0:PrivKey, #1:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI, (#0:Msg notLeq client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
		    sessKey, Hello)), (#0:Msg notLeq client1 ; LostMsgResponse ; sid ; h(
		    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq client1 ;
		    Shutdown ; sid ; h(client1 ; #1:Hash ; #2:Hash) ; #1:Hash ; #2:Hash), (
		    #0:Msg notLeq client1 ; ShutdownConfirm ; sid), (#0:Msg notLeq client2 ;
		    sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq client2 ;
		    LostMsgReq ; #3:Hash), (#0:Msg notLeq client2 ; Shutdown ; sid ; h(client2
		    ; #4:Hash ; h(client2 ; 0 ; Hi) ; #5:Hash) ; #4:Hash ; h(client2 ; 0 ; Hi)
		    ; #5:Hash), (#0:Msg notLeq client2 ; ShutdownConfirm ; sid), (#0:Msg notLeq
		    client3 ; sid ; h(client3 ; #6:Hash ; WillWeMeet) ; #6:Hash ; enc(sessKey,
		    WillWeMeet)), (#0:Msg notLeq client3 ; Shutdown ; sid ; h(client1 ;
		    #7:Hash) ; #7:Hash), #0:Msg notLeq client3 ; ShutdownConfirm ; sid => sign(
		    #8:PrivKey, #0:Msg) inL .)
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:PubKey notInI => sverify(#0:PubKey, #1:Msg) inL .)
		| (
		grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
		grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
		grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
		grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
		grl #0:Msg notInI => sverify(#1:PubKey, #0:Msg) inL .)
	[nonexec] .	

	eq ATTACK-STATE(0) = --- stealing sessionKey
		--- client1 ---
		:: nil :: 
		[nil , +(client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			   -(client2 ; sid ; idM21 ; enc(sessKey, Hi) ; sigM21),
			   -(client3 ; sid ; idM31 ; idM11 ; enc(sessKey, WillWeMeet) ; sigM31),
			   -(client2 ; LostMsgReq ; idM11 ; sigM21Req),
			   +(client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			 --- Shutdown phase ---  
			 --- Start ---
			   +(client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31 ; sign(s1, (client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31))), --- No payload
			   -(client2 ; Shutdown ; sid ; idM22 ; idM12 ; idM21 ; idM31 ; sig21Shutdown),
			   -(client3 ; Shutdown ; sid ; idM32 ; idM22 ; sig31Shutdown),
			 --- Confirm ---
			   +(client1 ; ShutdownConfirm ; sid ; sign(s1, (client1 ; ShutdownConfirm ; sid))), 
			   -(client2 ; ShutdownConfirm ; sid ; sig22Shutdown), 
			   -(client3 ; ShutdownConfirm ; sid ; sig32Shutdown), 
			 --- Publish ---
			   +(client1 ; s1),
			   -(client2 ; s2),
			   -(client3 ; s3)
			   | nil ]
		|| sessKey inI
		|| nil
		|| nil
		|| nil 
	[nonexec] .
	
	eq ATTACK-STATE(1) = --- stealing ephemeral PUBLIC key
		--- client1 ---
		:: nil :: 
		[nil , +(client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			   -(client2 ; sid ; idM21 ; enc(sessKey, Hi) ; sigM21),
			   -(client3 ; sid ; idM31 ; idM11 ; enc(sessKey, WillWeMeet) ; sigM31),
			   -(client2 ; LostMsgReq ; idM11 ; sigM21Req),
			   +(client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			 --- Shutdown phase ---  
			 --- Start ---
			   +(client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31 ; sign(s1, (client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31))), --- No payload
			   -(client2 ; Shutdown ; sid ; idM22 ; idM12 ; idM21 ; idM31 ; sig21Shutdown),
			   -(client3 ; Shutdown ; sid ; idM32 ; idM22 ; sig31Shutdown),
			 --- Confirm ---
			   +(client1 ; ShutdownConfirm ; sid ; sign(s1, (client1 ; ShutdownConfirm ; sid))), 
			   -(client2 ; ShutdownConfirm ; sid ; sig22Shutdown), 
			   -(client3 ; ShutdownConfirm ; sid ; sig32Shutdown), 
			 --- Publish ---
			   +(client1 ; s1),
			   -(client2 ; s2),
			   -(client3 ; s3)
			   | nil ]
		|| S1 inI
		|| nil
		|| nil
		|| nil 
	[nonexec] .
	
	eq ATTACK-STATE(2) = --- stealing ephemeral PRIVATE key of first client
		--- client1 ---
		:: nil :: 
		[nil , +(client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			   -(client2 ; sid ; idM21 ; enc(sessKey, Hi) ; sigM21),
			   -(client3 ; sid ; idM31 ; idM11 ; enc(sessKey, WillWeMeet) ; sigM31),
			   -(client2 ; LostMsgReq ; idM11 ; sigM21Req),
			   +(client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello) ; sign(s1, (client1 ; LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)))),
			 --- Shutdown phase ---  
			 --- Start ---
			   +(client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31 ; sign(s1, (client1 ; Shutdown ; sid ; h(client1 ; idM21 ; idM31) ; idM21 ; idM31))), --- No payload
			   -(client2 ; Shutdown ; sid ; idM22 ; idM12 ; idM21 ; idM31 ; sig21Shutdown),
			   -(client3 ; Shutdown ; sid ; idM32 ; idM22 ; sig31Shutdown),
			 --- Confirm ---
			   +(client1 ; ShutdownConfirm ; sid ; sign(s1, (client1 ; ShutdownConfirm ; sid))), 
			   -(client2 ; ShutdownConfirm ; sid ; sig22Shutdown), 
			   -(client3 ; ShutdownConfirm ; sid ; sig32Shutdown), 
			 --- Publish ---
			   +(client1 ; s1),
			   -(client2 ; s2),
			   -(client3 ; s3)
			   | nil ]
		|| s1 inI
		|| nil
		|| nil
		|| nil 
	[nonexec] .

***(	
	eq ATTACK-STATE(1) = --- stealing private part of auth info (x_1)
		--- client1 ---
		:: fr_k, fr_s, fr_r :: 
		[nil, --- Round 1 ---
			   |
			   nil ]
		
		|| x1 inI
		
		|| nil
		|| nil
		|| nil 
	[nonexec] .
	
	eq ATTACK-STATE(2) = --- stealing private ephemeral singature key (s_1)
		--- client1 ---
		:: fr_k, fr_s, fr_r :: 
		[nil, --- Round 1 ---
			   |
			   nil ]
		
		|| genPriv(client1, fr_s) inI
		
		|| nil
		|| nil
		|| nil 
	[nonexec] .
	)***
	
endfm


--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .





