| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => (#0:Number - #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => (#1:Number - #0:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq sid), (#0:Msg notLeq h(client1 ; #1:Hash)), (
    #0:Msg notLeq h(client1 ; 0 ; Hello)), (#0:Msg notLeq h(client1 ; #2:Hash ;
    #3:Hash)), (#0:Msg notLeq h(client2 ; 0 ; Hi)), (#0:Msg notLeq h(client2 ;
    #4:Hash ; h(client2 ; 0 ; Hi) ; #5:Hash)), (#0:Msg notLeq h(client3 ;
    #6:Hash)), #0:Msg notLeq h(client3 ; #7:Hash ; WillWeMeet) => (#0:Msg ;
    #8:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq sid ; h(client1 ; #2:Hash) ; #2:Hash), (#0:Msg notLeq sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1
    ; #3:Hash ; #4:Hash) ; #3:Hash ; #4:Hash), (#0:Msg notLeq sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; #5:Hash ; h(
    client2 ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash), (
    #0:Msg notLeq sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ; #8:Hash), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq Shutdown ; sid), (#0:Msg notLeq Shutdown ; sid ; h(client1 ;
    #9:Hash) ; #9:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #10:Hash ;
    #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2
    ; #12:Hash ; h(client2 ; 0 ; Hi) ; #13:Hash) ; #12:Hash ; h(client2 ; 0 ;
    Hi) ; #13:Hash), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
    #14:Hash ; #15:Hash), (#0:Msg notLeq #16:Hash ; h(client2 ; 0 ; Hi) ;
    #17:Hash), (#0:Msg notLeq #18:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(
    client1 ; #19:Hash ; #20:Hash) ; #19:Hash ; #20:Hash), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; #21:Hash
    ; h(client2 ; 0 ; Hi) ; #22:Hash) ; #21:Hash ; h(client2 ; 0 ; Hi) ;
    #22:Hash), #0:Msg notLeq h(client3 ; #23:Hash ; WillWeMeet) ; #23:Hash ;
    enc(sessKey, WillWeMeet) => (#0:Msg ; enc(sessKey, Hello)) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq sid ; h(client1 ; #2:Hash) ; #2:Hash), (#0:Msg notLeq sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1
    ; #3:Hash ; #4:Hash) ; #3:Hash ; #4:Hash), (#0:Msg notLeq sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; #5:Hash ; h(
    client2 ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash), (
    #0:Msg notLeq sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ; #8:Hash), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq Shutdown ; sid), (#0:Msg notLeq Shutdown ; sid ; h(client1 ;
    #9:Hash) ; #9:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #10:Hash ;
    #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2
    ; #12:Hash ; h(client2 ; 0 ; Hi) ; #13:Hash) ; #12:Hash ; h(client2 ; 0 ;
    Hi) ; #13:Hash), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
    #14:Hash ; #15:Hash), (#0:Msg notLeq #16:Hash ; h(client2 ; 0 ; Hi) ;
    #17:Hash), (#0:Msg notLeq #18:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(
    client1 ; #19:Hash ; #20:Hash) ; #19:Hash ; #20:Hash), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; #21:Hash
    ; h(client2 ; 0 ; Hi) ; #22:Hash) ; #21:Hash ; h(client2 ; 0 ; Hi) ;
    #22:Hash), #0:Msg notLeq h(client3 ; #23:Hash ; WillWeMeet) ; #23:Hash ;
    enc(sessKey, WillWeMeet) => (#0:Msg ; enc(sessKey, WillWeMeet)) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq sid ; h(client1 ; #2:Hash) ; #2:Hash), (#0:Msg notLeq sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1
    ; #3:Hash ; #4:Hash) ; #3:Hash ; #4:Hash), (#0:Msg notLeq sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; #5:Hash ; h(
    client2 ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash), (
    #0:Msg notLeq sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ; #8:Hash), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq Shutdown ; sid), (#0:Msg notLeq Shutdown ; sid ; h(client1 ;
    #9:Hash) ; #9:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #10:Hash ;
    #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2
    ; #12:Hash ; h(client2 ; 0 ; Hi) ; #13:Hash) ; #12:Hash ; h(client2 ; 0 ;
    Hi) ; #13:Hash), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
    #14:Hash ; #15:Hash), (#0:Msg notLeq #16:Hash ; h(client2 ; 0 ; Hi) ;
    #17:Hash), (#0:Msg notLeq #18:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(
    client1 ; #19:Hash ; #20:Hash) ; #19:Hash ; #20:Hash), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; #21:Hash
    ; h(client2 ; 0 ; Hi) ; #22:Hash) ; #21:Hash ; h(client2 ; 0 ; Hi) ;
    #22:Hash), #0:Msg notLeq h(client3 ; #23:Hash ; WillWeMeet) ; #23:Hash ;
    enc(sessKey, WillWeMeet) => (#0:Msg ; #24:Hash ; enc(sessKey, WillWeMeet))
    inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq sid ; h(client1 ; #2:Hash) ; #2:Hash), (#0:Msg notLeq sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1
    ; #3:Hash ; #4:Hash) ; #3:Hash ; #4:Hash), (#0:Msg notLeq sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; #5:Hash ; h(
    client2 ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash), (
    #0:Msg notLeq sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ; #8:Hash), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq Shutdown ; sid), (#0:Msg notLeq Shutdown ; sid ; h(client1 ;
    #9:Hash) ; #9:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #10:Hash ;
    #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2
    ; #12:Hash ; h(client2 ; 0 ; Hi) ; #13:Hash) ; #12:Hash ; h(client2 ; 0 ;
    Hi) ; #13:Hash), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
    #14:Hash ; #15:Hash), (#0:Msg notLeq #16:Hash ; h(client2 ; 0 ; Hi) ;
    #17:Hash), (#0:Msg notLeq #18:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(
    client1 ; #19:Hash ; #20:Hash) ; #19:Hash ; #20:Hash), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; #21:Hash
    ; h(client2 ; 0 ; Hi) ; #22:Hash) ; #21:Hash ; h(client2 ; 0 ; Hi) ;
    #22:Hash), #0:Msg notLeq h(client3 ; #23:Hash ; WillWeMeet) ; #23:Hash ;
    enc(sessKey, WillWeMeet) => (#0:Msg ; #24:Hash ; #25:Hash ; #26:Hash) inL .
    ; 
grl #0:Msg notInI, (#0:Msg notLeq s1), (#0:Msg notLeq s2), (#0:Msg notLeq s3),
    (#0:Msg notLeq #1:Hash), (#0:Msg notLeq enc(sessKey, Hello)), (#0:Msg
    notLeq enc(sessKey, Hi)), (#0:Msg notLeq enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq sid ; h(client1 ; #2:Hash) ; #2:Hash), (#0:Msg notLeq sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq sid ; h(client1
    ; #3:Hash ; #4:Hash) ; #3:Hash ; #4:Hash), (#0:Msg notLeq sid ; h(client2 ;
    0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq sid ; h(client2 ; #5:Hash ; h(
    client2 ; 0 ; Hi) ; #6:Hash) ; #5:Hash ; h(client2 ; 0 ; Hi) ; #6:Hash), (
    #0:Msg notLeq sid ; h(client3 ; #7:Hash ; WillWeMeet) ; #7:Hash ; enc(
    sessKey, WillWeMeet)), (#0:Msg notLeq LostMsgReq ; #8:Hash), (#0:Msg notLeq
    LostMsgResponse ; sid ; h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (
    #0:Msg notLeq Shutdown ; sid), (#0:Msg notLeq Shutdown ; sid ; h(client1 ;
    #9:Hash) ; #9:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client1 ; #10:Hash ;
    #11:Hash) ; #10:Hash ; #11:Hash), (#0:Msg notLeq Shutdown ; sid ; h(client2
    ; #12:Hash ; h(client2 ; 0 ; Hi) ; #13:Hash) ; #12:Hash ; h(client2 ; 0 ;
    Hi) ; #13:Hash), (#0:Msg notLeq ShutdownConfirm ; sid), (#0:Msg notLeq
    #14:Hash ; #15:Hash), (#0:Msg notLeq #16:Hash ; h(client2 ; 0 ; Hi) ;
    #17:Hash), (#0:Msg notLeq #18:Hash ; enc(sessKey, WillWeMeet)), (#0:Msg
    notLeq h(client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq h(
    client1 ; #19:Hash ; #20:Hash) ; #19:Hash ; #20:Hash), (#0:Msg notLeq h(
    client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq h(client2 ; #21:Hash
    ; h(client2 ; 0 ; Hi) ; #22:Hash) ; #21:Hash ; h(client2 ; 0 ; Hi) ;
    #22:Hash), #0:Msg notLeq h(client3 ; #23:Hash ; WillWeMeet) ; #23:Hash ;
    enc(sessKey, WillWeMeet) => (#24:Msg ; #0:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI => dec(#0:SimmKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => dec(#1:SimmKey, #0:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:SimmKey notInI, #0:SimmKey notLeq sessKey => enc(#0:SimmKey, #1:Msg) inL
    .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq Hello), (#0:Msg notLeq Hi), #0:Msg notLeq
    WillWeMeet => enc(#1:SimmKey, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => enc(#1:SimmKey, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .,none,
grl empty => (#2:Msg,#1:SimmKey) inL .} usingGrammar 
grl empty => enc(#1:SimmKey, #2:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => exp(#0:Number, #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl #0:Number notInI => exp(#1:Number, #0:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Number inL => (#1:Number xorc #0:Number) inL . ; 
grl exp(#0:Number, #1:Number) notLeq exp(#2:Gen, #3:Number) => exp(#0:Number,
    #1:Number) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PrivKey inL => (#1:Number xorc #0:PrivKey) inL . ; 
grl genPriv(#0:Name, #1:Fresh) notLeq genPriv(intruder, #2:Fresh) => genPriv(
    #0:Name, #1:Fresh) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PubKey inL => (#1:Number xorc #0:PubKey) inL . ; 
grl #0:PrivKey notInI => getPub(#0:PrivKey) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Hash inL => (#0:Hash xorc #1:Number) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq client1 ; #1:Hash), (#0:Msg notLeq client1 ;
    0 ; Hello), (#0:Msg notLeq client1 ; #2:Hash ; #3:Hash), (#0:Msg notLeq
    client2 ; 0 ; Hi), (#0:Msg notLeq client2 ; #4:Hash ; h(client2 ; 0 ; Hi) ;
    #5:Hash), (#0:Msg notLeq client3 ; #6:Hash), #0:Msg notLeq client3 ;
    #7:Hash ; WillWeMeet => h(#0:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Nonce inL => (#1:Number xorc #0:Nonce) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq n(intruder, #2:Fresh) => n(#0:Name, #1:Fresh)
    inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PrivKey notInI, (#0:PrivKey notLeq s1), (#0:PrivKey notLeq s2),
    #0:PrivKey notLeq s3 => sign(#0:PrivKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq client1 ; sid ; h(client1 ; 0 ; Hello) ; enc(
    sessKey, Hello)), (#0:Msg notLeq client1 ; LostMsgResponse ; sid ; h(
    client1 ; 0 ; Hello) ; enc(sessKey, Hello)), (#0:Msg notLeq client1 ;
    Shutdown ; sid ; h(client1 ; #1:Hash ; #2:Hash) ; #1:Hash ; #2:Hash), (
    #0:Msg notLeq client1 ; ShutdownConfirm ; sid), (#0:Msg notLeq client2 ;
    sid ; h(client2 ; 0 ; Hi) ; enc(sessKey, Hi)), (#0:Msg notLeq client2 ;
    LostMsgReq ; #3:Hash), (#0:Msg notLeq client2 ; Shutdown ; sid ; h(client2
    ; #4:Hash ; h(client2 ; 0 ; Hi) ; #5:Hash) ; #4:Hash ; h(client2 ; 0 ; Hi)
    ; #5:Hash), (#0:Msg notLeq client2 ; ShutdownConfirm ; sid), (#0:Msg notLeq
    client3 ; sid ; h(client3 ; #6:Hash ; WillWeMeet) ; #6:Hash ; enc(sessKey,
    WillWeMeet)), (#0:Msg notLeq client3 ; Shutdown ; sid ; h(client1 ;
    #7:Hash) ; #7:Hash), #0:Msg notLeq client3 ; ShutdownConfirm ; sid => sign(
    #8:PrivKey, #0:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:PubKey notInI => sverify(#0:PubKey, #1:Msg) inL .)
| (
grl #0:Msg inL => enc(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => dec(#1:SimmKey, #0:Msg) inL . ; 
grl #0:Msg inL => sign(#1:PrivKey, #0:Msg) inL . ; 
grl #0:Msg inL => sverify(#1:PubKey, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => sverify(#1:PubKey, #0:Msg) inL .)
