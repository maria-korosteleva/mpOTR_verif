		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	    Maude 2.6 built: Dec  9 2010 18:28:39
	    Copyright 1997-2010 SRI International
		   Mon Nov 17 20:20:02 2014
Maude> 
	    Full Maude 2.5b January 14th 2011


	    Maude-NPA Version: 11/26/2011
	    Copyright (c) 2012, University of Illinois
	    All rights reserved.

==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 12367400 in 62816ms cpu (82527ms real) (196882 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:NeNonceSet notInI, (#0:NeNonceSet notLeq n(i, #1:Fresh)), #0:NeNonceSet
    notLeq #2:NeNonceSet * #3:NeNonceSet => (#4:NeNonceSet * #0:NeNonceSet) inL
    . ; 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI, (#0:NeNonceSet notLeq n(i,
    #2:Fresh)), (#1:NeNonceSet * #0:NeNonceSet) notLeq #4:NeNonceSet *
    #3:NeNonceSet => #0:NeNonceSet inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL .,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL .,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL .} usingGrammar 
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => (#0:Msg ; #1:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, (#0:Msg notLeq exp(g, n(#1:Name, #2:Fresh))), #0:Msg notLeq
    #3:Name ; exp(g, n(#4:Name, #5:Fresh)) => (#6:Msg ; #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .,none,
grl empty => (#1:Msg,#2:Msg) inL .} usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL .)
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Key notInI, (#0:Key notLeq exp(#1:Exp, n(#2:Name, #3:Fresh))), #0:Key
    notLeq exp(#4:Gen, #5:NeNonceSet * n(#6:Name, #7:Fresh)) => e(#0:Key,
    #8:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:Msg notInI, #0:Msg notLeq sec(#1:Name, #2:Fresh) => e(#3:Key, #0:Msg)
    inL .)
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .,none,
grl empty => (#2:Msg,#1:Key) inL .} usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:GenvExp notInI => exp(#0:GenvExp, #1:NeNonceSet) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl #0:NeNonceSet notInI, (#0:NeNonceSet notLeq n(#1:Name, #2:Fresh)),
    #0:NeNonceSet notLeq #4:NeNonceSet * #3:NeNonceSet => exp(#5:GenvExp,
    #0:NeNonceSet) inL .)
| (errorNoHeuristicApplied {
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL .,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL .,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL .} usingGrammar 
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL .)
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL .)
| (errorInconsistentExceptionsInGrammarRule 
grl sec(#0:Name, #1:Fresh) notLeq sec(#3:Name, #5:Fresh) => sec(#0:Name,
    #1:Fresh) inL . inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . ; 
grl sec(#0:Name, #1:Fresh) notLeq sec(#3:Name, #5:Fresh) => sec(#0:Name,
    #1:Fresh) inL .)
| 
grl empty => n(a, #0:Fresh) inL . ; 
grl empty => n(b, #0:Fresh) inL . ; 
grl empty => (#0:NeNonceSet * n(a, #1:Fresh)) inL . ; 
grl empty => (#0:NeNonceSet * n(b, #1:Fresh)) inL . ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL . ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL . ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .
==========================================
reduce in MAUDE-NPA : run(2, 0) .
rewrites: 3436 in 44ms cpu (46ms real) (78090 rewrites/second)
result IdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   -(a ; b ; XE:Exp), 
   +(a ; b ; exp(g, n(b, r:Fresh))), 
   -(e(exp(XE:Exp, n(b, r:Fresh)), sec(a, r':Fresh))) | nil] 
|| 
sec(a, r':Fresh) inI
|| 
nil
|| 
nil
|| never((S:StrandSet || K:IntruderKnowledge,
#4:Gen != #0:Gen)
((S:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#1:Exp, N1:Nonce)), 
   -(sec(A:Name, #2:Fresh)), 
   +(e(exp(#1:Exp, N2:Nonce), sec(A:Name, #2:Fresh))), nil] ) ||
    K:IntruderKnowledge)
((S:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#1:Exp, N1:Nonce)), 
   -(e(exp(#1:Exp, N1:Nonce), S:Secret)), 
   +(S:Secret), nil] ) || K:IntruderKnowledge)
(S:StrandSet & 
:: nil ::
[ nil | 
   -(exp(GE:GenvExp, NS1:NeNonceSet * NS2:NeNonceSet)), 
   -(NS3:NeNonceSet), 
   +(exp(GE:GenvExp, NS1:NeNonceSet * NS2:NeNonceSet * NS3:NeNonceSet)), nil] )
    || K:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : summary(2, 1) .
rewrites: 2214329 in 6784ms cpu (9063ms real) (326404 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 2) .
rewrites: 5833283 in 27072ms cpu (34936ms real) (215472 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 3) .
rewrites: 5794137 in 31868ms cpu (41946ms real) (181816 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 4) .
rewrites: 10141757 in 72600ms cpu (90948ms real) (139693 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 5) .
rewrites: 7619402 in 56804ms cpu (72927ms real) (134134 rewrites/second)
result Summary: States>> 7 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 6) .
rewrites: 10161878 in 61560ms cpu (78980ms real) (165072 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 7) .
rewrites: 10179295 in 37212ms cpu (47326ms real) (273548 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 8) .
rewrites: 11799784 in 61528ms cpu (77789ms real) (191779 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 9) .
rewrites: 8301386 in 33372ms cpu (42905ms real) (248753 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 10) .
rewrites: 5990959 in 27372ms cpu (35409ms real) (218871 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 11) .
rewrites: 4125757 in 19628ms cpu (24802ms real) (210197 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2, 12) .
rewrites: 1910047 in 4584ms cpu (5912ms real) (416676 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(2, 1) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[1]) . 1 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; #3:Exp), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
|| 
sec(a, #1:Fresh) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
irr(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))),
inst(#3:Exp)
|| 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, sec(a, #1:Fresh))), 
      +(sec(a, #1:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; #3:Exp), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] ,    
   sec(a, #1:Fresh) !inI,
   e(#0:Key, sec(a, #1:Fresh)) inI,
   e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
   irr(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))),
   inst(#3:Exp),    
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), 
   -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))),    never((#4:StrandSet
    || #5:IntruderKnowledge,
   #6:Gen != #7:Gen)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(sec(#10:Name, #11:Fresh)), 
      +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
      +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
      -(#17:NeNonceSet), 
      +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)),
    nil] ) || #5:IntruderKnowledge) )
|| never((#4:StrandSet || #5:IntruderKnowledge,
#6:Gen != #7:Gen)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(sec(#10:Name, #11:Fresh)), 
   +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
   +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
   -(#17:NeNonceSet), 
   +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)), nil]
    ) || #5:IntruderKnowledge))
(< (1[2]) . 1 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
|| 
sec(a, #1:Fresh) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
irr(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))),
inst(#3:Gen),
inst(#4:NeNonceSet)
|| 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, sec(a, #1:Fresh))), 
      +(sec(a, #1:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil]
    ,    
   sec(a, #1:Fresh) !inI,
   e(#0:Key, sec(a, #1:Fresh)) inI,
   e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
   irr(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))),
   inst(#3:Gen),
   inst(#4:NeNonceSet),    
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))),   
    never((#5:StrandSet || #6:IntruderKnowledge,
   #7:Gen != #8:Gen)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(sec(#11:Name, #12:Fresh)), 
      +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
      +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
      -(#18:NeNonceSet), 
      +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)),
    nil] ) || #6:IntruderKnowledge) )
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
< (1[2]) . 5 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
sec(a, #3:Fresh) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI,
inst(#0:Gen),
inst(#1:NeNonceSet)
|| 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
|| 
nil
|| never((#4:StrandSet || #5:IntruderKnowledge,
#6:Gen != #7:Gen)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(sec(#10:Name, #11:Fresh)), 
   +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
   +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
   -(#17:NeNonceSet), 
   +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)), nil]
    ) || #5:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 2) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
|| 
sec(a, #1:Fresh) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)) inI,
inst(#3:Gen),
inst(#4:NeNonceSet)
|| 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #1:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)))
|| 
ghost( #0:Key,
   :: nil ::
   [ nil | 
      -(#0:Key), 
      -(e(#0:Key, sec(a, #1:Fresh))), 
      +(sec(a, #1:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #1:Fresh)), 
      +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil]
     & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil]
    ,    
   sec(a, #1:Fresh) !inI,
   e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) !inI,
   e(#0:Key, sec(a, #1:Fresh)) inI,
   exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)) inI,
   inst(#3:Gen),
   inst(#4:NeNonceSet),    
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))),   
    never((#5:StrandSet || #6:IntruderKnowledge,
   #7:Gen != #8:Gen)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(sec(#11:Name, #12:Fresh)), 
      +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
      +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
      -(#18:NeNonceSet), 
      +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)),
    nil] ) || #6:IntruderKnowledge) )
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
(< (1[2]) . 5 . 10 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
sec(a, #3:Fresh) inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet)
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   sec(a, #3:Fresh) inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#4:StrandSet || #5:IntruderKnowledge,
   #6:Gen != #7:Gen)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(sec(#10:Name, #11:Fresh)), 
      +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
      +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
      -(#17:NeNonceSet), 
      +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)),
    nil] ) || #5:IntruderKnowledge) )
|| never((#4:StrandSet || #5:IntruderKnowledge,
#6:Gen != #7:Gen)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(sec(#10:Name, #11:Fresh)), 
   +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
   +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
   -(#17:NeNonceSet), 
   +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)), nil]
    ) || #5:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
   -(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #2:Fresh))), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #4:Name ; exp(#1:Gen, n(b, #0:Fresh))), 
   +(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))) | nil]
    )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh)) inI,
exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)) inI,
irr(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))),
inst(#1:Gen)
|| 
resuscitated(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
-(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
-(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh)))
|| 
nil
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #3:Fresh))), 
   -(a ; #5:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))) | nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)) inI,
irr(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))),
inst(#1:Gen),
inst(#2:NeNonceSet)
|| 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 3) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 7 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
e(#4:Key, sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet)
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#4:Key), 
-(e(#4:Key, sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   e(#4:Key, sec(a, #3:Fresh)) inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(#4:Key), 
   -(e(#4:Key, sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#5:StrandSet || #6:IntruderKnowledge,
   #7:Gen != #8:Gen)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(sec(#11:Name, #12:Fresh)), 
      +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
      +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
      -(#18:NeNonceSet), 
      +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)),
    nil] ) || #6:IntruderKnowledge) ),

ghost( #4:Key,
   :: nil ::
   [ nil | 
      -(#4:Key), 
      -(e(#4:Key, sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(#4:Key, sec(a, #3:Fresh)) inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),    
   -(#4:Key), 
   -(e(#4:Key, sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#5:StrandSet || #6:IntruderKnowledge,
   #7:Gen != #8:Gen)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(sec(#11:Name, #12:Fresh)), 
      +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
      +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
      -(#18:NeNonceSet), 
      +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)),
    nil] ) || #6:IntruderKnowledge) )
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
(< (1[2]) . 5 . 10 . 7 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
sec(a, #4:Fresh) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet)
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   sec(a, #4:Fresh) inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#5:StrandSet || #6:IntruderKnowledge,
   #7:Gen != #8:Gen)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(sec(#11:Name, #12:Fresh)), 
      +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#9:Exp, #10:Nonce)), 
      -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
      +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
      -(#18:NeNonceSet), 
      +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)),
    nil] ) || #6:IntruderKnowledge) )
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . 0 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))) | nil] )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
inst(#1:Gen),
inst(#2:NeNonceSet)
|| 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)))
|| 
nil
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
   -(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #2:Fresh))), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #4:Name ; exp(#1:Gen, n(b, #0:Fresh))), 
   +(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)) inI,
(a ; #4:Name ; exp(#1:Gen, n(b, #0:Fresh))) inI,
inst(#1:Gen)
|| 
-(a ; #4:Name ; exp(#1:Gen, n(b, #0:Fresh))), 
+(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
-(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh))), 
-(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#1:Gen, n(a, #2:Fresh) * n(b, #0:Fresh)), sec(a, #3:Fresh)))
|| 
nil
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 . 2 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #5:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)) inI,
(a ; #5:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))) inI,
inst(#1:Gen),
inst(#2:NeNonceSet)
|| 
-(a ; #5:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #0:Fresh)), sec(a,
    #4:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 4) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 7 . 10 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
e(#5:Key, sec(a, #4:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet)
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(#5:Key), 
-(e(#5:Key, sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   e(#5:Key, sec(a, #4:Fresh)) inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(#5:Key), 
   -(e(#5:Key, sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#6:StrandSet || #7:IntruderKnowledge,
   #8:Gen != #9:Gen)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(sec(#12:Name, #13:Fresh)), 
      +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
      +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
      -(#19:NeNonceSet), 
      +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #7:IntruderKnowledge) ),

ghost( #5:Key,
   :: nil ::
   [ nil | 
      -(#5:Key), 
      -(e(#5:Key, sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(#5:Key, sec(a, #4:Fresh)) inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),    
   -(#5:Key), 
   -(e(#5:Key, sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#6:StrandSet || #7:IntruderKnowledge,
   #8:Gen != #9:Gen)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(sec(#12:Name, #13:Fresh)), 
      +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
      +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
      -(#19:NeNonceSet), 
      +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #7:IntruderKnowledge) )
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge))
(< (1[2]) . 5 . 10 . 7 . 8 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
sec(a, #5:Fresh) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet)
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   sec(a, #5:Fresh) inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#6:StrandSet || #7:IntruderKnowledge,
   #8:Gen != #9:Gen)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(sec(#12:Name, #13:Fresh)), 
      +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
      +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
      -(#19:NeNonceSet), 
      +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #7:IntruderKnowledge) )
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
inst(#1:Gen),
inst(#2:NeNonceSet),
exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) != exp(#6:Gen, #7:NeNonceSet * n(a,
    #4:Fresh))
|| 
-(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
+(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#1:Gen),
   inst(#2:NeNonceSet),
   exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen)
|| 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
nil
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 . 2 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) inI,
inst(#1:Gen),
inst(#2:NeNonceSet)
|| 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 5) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 7 . 10 . 11 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
e(#6:Key, sec(a, #5:Fresh)) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet)
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(#6:Key), 
-(e(#6:Key, sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   e(#6:Key, sec(a, #5:Fresh)) inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(#6:Key), 
   -(e(#6:Key, sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) ),

ghost( #6:Key,
   :: nil ::
   [ nil | 
      -(#6:Key), 
      -(e(#6:Key, sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(#6:Key, sec(a, #5:Fresh)) inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),    
   -(#6:Key), 
   -(e(#6:Key, sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) )
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge))
(< (1[2]) . 5 . 10 . 7 . 8 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
sec(a, #2:Fresh) inI,
inst(#1:NeNonceSet)
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
nil
|| never((#3:StrandSet || #4:IntruderKnowledge,
#5:Gen != #6:Gen)
((#3:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#7:Exp, #8:Nonce)), 
   -(sec(#9:Name, #10:Fresh)), 
   +(e(exp(#7:Exp, #11:Nonce), sec(#9:Name, #10:Fresh))), nil] ) ||
    #4:IntruderKnowledge)
((#3:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#7:Exp, #8:Nonce)), 
   -(e(exp(#7:Exp, #8:Nonce), #12:Secret)), 
   +(#12:Secret), nil] ) || #4:IntruderKnowledge)
(#3:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:GenvExp, #14:NeNonceSet * #15:NeNonceSet)), 
   -(#16:NeNonceSet), 
   +(exp(#13:GenvExp, #14:NeNonceSet * #15:NeNonceSet * #16:NeNonceSet)), nil]
    ) || #4:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]  &
    
:: #1:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), nil] )
|| 
#2:NeNonceSet !inI,
sec(a, #6:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) inI,
exp(#0:Gen, n(a, #1:Fresh)) inI,
inst(#4:Gen),
inst(#5:NeNonceSet),
exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) != exp(#0:Gen, #2:NeNonceSet * n(a,
    #1:Fresh))
|| 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #6:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)))
|| 
ghost( a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #6:Fresh)), 
      +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
      +(sec(a, #6:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]
     & 
   :: #1:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #1:Fresh))) | 
      -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), nil]
    ,    
   sec(a, #6:Fresh) !inI,
   e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh)) !inI,
   exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) inI,
   exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) inI,
   inst(#4:Gen),
   inst(#5:NeNonceSet),
   exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) != exp(#0:Gen, #2:NeNonceSet *
    n(a, #1:Fresh)),    
   -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
   resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 16 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet),
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet * n(a,
    #4:Fresh))
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
+(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) ),

ghost( a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 . 4 . 5 > (
:: nil ::
[ nil | 
   -(a), 
   -(#1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(a ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Name ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #1:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
(a ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#1:Name ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
(#0:Msg ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen)
|| 
-(#0:Msg ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
-(a), 
-(#1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
+(a ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
-(a ; #1:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
+(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 . 4 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(b, #2:Fresh)) inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
inst(#1:Gen)
|| 
-(#0:Name), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
nil
|| never((#5:StrandSet || #6:IntruderKnowledge,
#7:Gen != #8:Gen)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(sec(#11:Name, #12:Fresh)), 
   +(e(exp(#9:Exp, #13:Nonce), sec(#11:Name, #12:Fresh))), nil] ) ||
    #6:IntruderKnowledge)
((#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#9:Exp, #10:Nonce)), 
   -(e(exp(#9:Exp, #10:Nonce), #14:Secret)), 
   +(#14:Secret), nil] ) || #6:IntruderKnowledge)
(#5:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet)), 
   -(#18:NeNonceSet), 
   +(exp(#15:GenvExp, #16:NeNonceSet * #17:NeNonceSet * #18:NeNonceSet)), nil]
    ) || #6:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 . 2 . 3 . 6 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
inst(#1:Gen),
inst(#2:NeNonceSet)
|| 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 6) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 7 . 10 . 11 . 2 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
e(#3:Key, sec(a, #2:Fresh)) inI,
inst(#1:NeNonceSet)
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#3:Key), 
-(e(#3:Key, sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
ghost( #3:Key,
   :: nil ::
   [ nil | 
      -(#3:Key), 
      -(e(#3:Key, sec(a, #2:Fresh))), 
      +(sec(a, #2:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #2:Fresh)), 
      +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(g, #1:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil] ,   
    
   sec(a, #2:Fresh) !inI,
   e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
   e(#3:Key, sec(a, #2:Fresh)) inI,
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) inI,
   inst(g),
   inst(#1:NeNonceSet),    
   -(#3:Key), 
   -(e(#3:Key, sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))),    never((
    #4:StrandSet || #5:IntruderKnowledge,
   #6:Gen != #7:Gen)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(sec(#10:Name, #11:Fresh)), 
      +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#8:Exp, #9:Nonce)), 
      -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
      +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
      -(#17:NeNonceSet), 
      +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)),
    nil] ) || #5:IntruderKnowledge) )
|| never((#4:StrandSet || #5:IntruderKnowledge,
#6:Gen != #7:Gen)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(sec(#10:Name, #11:Fresh)), 
   +(e(exp(#8:Exp, #12:Nonce), sec(#10:Name, #11:Fresh))), nil] ) ||
    #5:IntruderKnowledge)
((#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#8:Exp, #9:Nonce)), 
   -(e(exp(#8:Exp, #9:Nonce), #13:Secret)), 
   +(#13:Secret), nil] ) || #5:IntruderKnowledge)
(#4:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet)), 
   -(#17:NeNonceSet), 
   +(exp(#14:GenvExp, #15:NeNonceSet * #16:NeNonceSet * #17:NeNonceSet)), nil]
    ) || #5:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #2:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(a, #2:Fresh))), 
   +(exp(#1:Gen, n(a, #2:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]  &
    
:: #2:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #7:Name ; exp(#1:Gen, #8:NeNonceSet)), 
   +(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), nil] )
|| 
#8:NeNonceSet !inI,
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh)) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)) !inI,
exp(#1:Gen, n(a, #2:Fresh)) !inI,
exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(a, #2:Fresh))) inI,
inst(#4:Gen),
inst(#5:NeNonceSet),
exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)) != exp(#4:Gen, #5:NeNonceSet * n(b,
    #3:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(a, #2:Fresh))), 
+(exp(#1:Gen, n(a, #2:Fresh))), 
generatedByIntruder(#8:NeNonceSet), 
-(exp(#1:Gen, n(a, #2:Fresh))), 
-(#8:NeNonceSet), 
+(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
-(a ; #7:Name ; exp(#1:Gen, #8:NeNonceSet)), 
+(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
resuscitated(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #6:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)))
|| 
ghost( a ; #7:Name ; exp(#1:Gen, #8:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
      -(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
      +(sec(a, #6:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #6:Fresh)), 
      +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]
     & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), nil]
     & 
   :: #2:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #2:Fresh))) | 
      -(a ; #7:Name ; exp(#1:Gen, #8:NeNonceSet)), 
      +(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), nil]
    ,    
   sec(a, #6:Fresh) !inI,
   e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh)) !inI,
   e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh)) !inI,
   exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)) inI,
   exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)) inI,
   inst(#4:Gen),
   inst(#5:NeNonceSet),
   exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)) != exp(#4:Gen, #5:NeNonceSet *
    n(b, #3:Fresh)),    
   -(a ; #7:Name ; exp(#1:Gen, #8:NeNonceSet)), 
   +(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
   resuscitated(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
   -(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#1:Gen, #8:NeNonceSet * n(a, #2:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #6:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
#7:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
exp(#6:Gen, n(a, #4:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet),
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet * n(a,
    #4:Fresh))
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#6:Gen, n(a, #4:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
+(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, n(a, #4:Fresh))), 
      -(#7:NeNonceSet), 
      +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   #7:NeNonceSet !inI,
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   exp(#6:Gen, n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   generatedByIntruder(#7:NeNonceSet), 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) ),

ghost( a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 16 . 9 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet),
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet * n(a,
    #5:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
+(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) ),

ghost( a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 . 4 . 9 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #5:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name), 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   +(#5:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
(a ; #5:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#5:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen)
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(#5:Name), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
+(#5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #5:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 . 2 . 3 . 6 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), nil] )
|| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))) !inI,
(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet)
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#5:Name), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
+(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(a), 
-(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
+(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(a), 
      -(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      +(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#5:Name), 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      +(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), nil] ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   (a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))) !inI,
   (#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(#5:Name), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(a), 
   -(#5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(a ; #5:Name ; exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
   resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh) * n(b, #1:Fresh)), sec(a,
    #4:Fresh))),    never((#6:StrandSet || #7:IntruderKnowledge,
   #8:Gen != #9:Gen)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(sec(#12:Name, #13:Fresh)), 
      +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#10:Exp, #11:Nonce)), 
      -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
      +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
      -(#19:NeNonceSet), 
      +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #7:IntruderKnowledge) )
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 7) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(a, #3:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
   +(sec(a, #7:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #7:Fresh)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), 
   +(exp(#2:Gen, n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), nil]  &
    
:: #3:Fresh,#7:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #8:Name ; exp(#2:Gen, #9:NeNonceSet)), 
   +(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), nil] )
|| 
#9:NeNonceSet !inI,
sec(a, #7:Fresh) !inI,
e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh)) !inI,
exp(#2:Gen, n(a, #3:Fresh)) !inI,
exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(a, #3:Fresh))) !inI,
exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(a, #3:Fresh))) inI,
inst(#5:Gen),
inst(#6:NeNonceSet),
exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(b,
    #4:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(a, #3:Fresh))), 
+(exp(#2:Gen, n(a, #3:Fresh))), 
generatedByIntruder(#9:NeNonceSet), 
-(exp(#2:Gen, n(a, #3:Fresh))), 
-(#9:NeNonceSet), 
+(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #8:Name ; exp(#2:Gen, #9:NeNonceSet)), 
+(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
resuscitated(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
+(sec(a, #7:Fresh)), 
-(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #7:Fresh)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh)))
|| 
ghost( a ; #8:Name ; exp(#2:Gen, #9:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
      -(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
      +(sec(a, #7:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh))), 
      -(sec(a, #7:Fresh)), 
      +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), nil]
     & 
   :: #4:Fresh ::
   [ nil, 
      -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #4:Fresh))) | 
      -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), nil]
     & 
   :: #3:Fresh,#7:Fresh ::
   [ nil, 
      +(a ; #8:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #8:Name ; exp(#2:Gen, #9:NeNonceSet)), 
      +(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), nil]
    ,    
   sec(a, #7:Fresh) !inI,
   e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh)) !inI,
   e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh)) !inI,
   exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)) inI,
   exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)) inI,
   inst(#5:Gen),
   inst(#6:NeNonceSet),
   exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)) != exp(#5:Gen, #6:NeNonceSet *
    n(b, #4:Fresh)),    
   -(a ; #8:Name ; exp(#2:Gen, #9:NeNonceSet)), 
   +(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
   resuscitated(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
   -(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#2:Gen, #9:NeNonceSet * n(a, #3:Fresh)), sec(a, #7:Fresh))), 
   +(sec(a, #7:Fresh)), 
   -(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #7:Fresh)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #7:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) )
|| never((#10:StrandSet || #11:IntruderKnowledge,
#12:Gen != #13:Gen)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(sec(#16:Name, #17:Fresh)), 
   +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
   +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
   -(#23:NeNonceSet), 
   +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #11:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
#7:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#6:Gen, n(a, #4:Fresh)) !inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) inI,
inst(#0:Gen),
inst(#2:NeNonceSet),
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet * n(a,
    #4:Fresh))
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
+(exp(#6:Gen, n(a, #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#6:Gen, n(a, #4:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
+(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, n(a, #4:Fresh))), 
      -(#7:NeNonceSet), 
      +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
      +(exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   #7:NeNonceSet !inI,
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   exp(#6:Gen, n(a, #4:Fresh)) !inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   (#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(exp(#6:Gen, n(a, #4:Fresh))), 
   generatedByIntruder(#7:NeNonceSet), 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) ),

ghost( a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 14 . 10 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
#8:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#7:Gen, n(a, #5:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet),
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet * n(a,
    #5:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
generatedByIntruder(#8:NeNonceSet), 
-(exp(#7:Gen, n(a, #5:Fresh))), 
-(#8:NeNonceSet), 
+(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
+(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, n(a, #5:Fresh))), 
      -(#8:NeNonceSet), 
      +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   #8:NeNonceSet !inI,
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   exp(#7:Gen, n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   generatedByIntruder(#8:NeNonceSet), 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) ),

ghost( a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 16 . 9 . 11 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet),
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet * n(a,
    #6:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
+(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) ),

ghost( a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) )
|| never((#10:StrandSet || #11:IntruderKnowledge,
#12:Gen != #13:Gen)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(sec(#16:Name, #17:Fresh)), 
   +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
   +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
   -(#23:NeNonceSet), 
   +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #11:IntruderKnowledge))
(< (1[2]) . (1{2}) . 5 . 0 . 2 . 4 . 9 . 9 . 14 > (
:: nil ::
[ nil | 
   -(a), 
   -(#6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(a ; #6:Name ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name), 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   +(#6:Name ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
(a ; #6:Name ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#6:Name ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen)
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(#6:Name), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
+(#6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
-(a), 
-(#6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
+(a ; #6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
-(a ; #6:Name ; exp(#2:Gen, n(b, #3:Fresh))), 
+(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#2:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
nil
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge))
< (1[2]) . (1{2}) . 6 . 0 . 2 . 3 . 6 . 9 . 16 > (
:: nil ::
[ nil | 
   -(a), 
   -(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), nil] )
|| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))) !inI,
(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))) !inI,
exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)) inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet)
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(#6:Name), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
+(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(a), 
-(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
+(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
resuscitated(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
-(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(a), 
      -(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      +(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Name), 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      +(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh))), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), nil] ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   (a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))) !inI,
   (#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(#6:Name), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(a), 
   -(#6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(a ; #6:Name ; exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
   resuscitated(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
   -(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(a, #4:Fresh) * n(b, #2:Fresh)), sec(a,
    #5:Fresh))),    never((#7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) )
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 8) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #4:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(g, #6:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #6:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(g, #6:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
   +(#5:Name ; exp(g, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name ; exp(g, n(a, #4:Fresh))), 
   +(exp(g, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil | 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #5:Name ; exp(g, #6:NeNonceSet)), 
   +(e(exp(g, #6:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(g, #6:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)) !inI,
exp(g, n(a, #4:Fresh)) !inI,
exp(g, #6:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; #5:Name ; exp(g, #6:NeNonceSet)) !inI,
(a ; #5:Name ; exp(g, n(a, #4:Fresh))) !inI,
(#5:Name ; exp(g, n(a, #4:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)) inI,
inst(#1:Gen),
inst(#2:NeNonceSet),
exp(g, #6:NeNonceSet * n(a, #4:Fresh)) != exp(#1:Gen, #2:NeNonceSet * n(b,
    #0:Fresh))
|| 
generatedByIntruder(a ; #5:Name ; exp(g, #6:NeNonceSet)), 
+(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
-(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
+(#5:Name ; exp(g, n(a, #4:Fresh))), 
-(#5:Name ; exp(g, n(a, #4:Fresh))), 
+(exp(g, n(a, #4:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(g, n(a, #4:Fresh))), 
-(#6:NeNonceSet), 
+(exp(g, #6:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #5:Name ; exp(g, #6:NeNonceSet)), 
+(e(exp(g, #6:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(g, #6:NeNonceSet * n(a, #4:Fresh))), 
-(exp(g, #6:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(g, #6:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(b, #0:Fresh)), sec(a, #3:Fresh)))
|| 
nil
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 17 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
#7:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#6:Gen, n(a, #4:Fresh)) !inI,
exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
(#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) inI,
inst(#0:Gen),
inst(#2:NeNonceSet),
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet * n(a,
    #4:Fresh))
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
+(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
-(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
+(exp(#6:Gen, n(a, #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#6:Gen, n(a, #4:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
+(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, n(a, #4:Fresh))), 
      -(#7:NeNonceSet), 
      +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
      +(exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
      +(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   #7:NeNonceSet !inI,
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   exp(#6:Gen, n(a, #4:Fresh)) !inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) !inI,
   (#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   (#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(#9:Msg ; #8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   -(#8:Msg ; exp(#6:Gen, n(a, #4:Fresh))), 
   +(exp(#6:Gen, n(a, #4:Fresh))), 
   generatedByIntruder(#7:NeNonceSet), 
   -(exp(#6:Gen, n(a, #4:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) ),

ghost( a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
      -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
      +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil]
    ,    
   sec(a, #3:Fresh) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) inI,
   exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) != exp(#6:Gen, #7:NeNonceSet *
    n(a, #4:Fresh)),    
   -(a ; #5:Name ; exp(#6:Gen, #7:NeNonceSet)), 
   +(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) )
|| never((#10:StrandSet || #11:IntruderKnowledge,
#12:Gen != #13:Gen)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(sec(#16:Name, #17:Fresh)), 
   +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
   +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
   -(#23:NeNonceSet), 
   +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #11:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 14 . 10 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
#8:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(#7:Gen, n(a, #5:Fresh)) !inI,
exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet),
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet * n(a,
    #5:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
+(exp(#7:Gen, n(a, #5:Fresh))), 
generatedByIntruder(#8:NeNonceSet), 
-(exp(#7:Gen, n(a, #5:Fresh))), 
-(#8:NeNonceSet), 
+(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
+(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, n(a, #5:Fresh))), 
      -(#8:NeNonceSet), 
      +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
      +(exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   #8:NeNonceSet !inI,
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   exp(#7:Gen, n(a, #5:Fresh)) !inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   (#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(exp(#7:Gen, n(a, #5:Fresh))), 
   generatedByIntruder(#8:NeNonceSet), 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) ),

ghost( a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) )
|| never((#10:StrandSet || #11:IntruderKnowledge,
#12:Gen != #13:Gen)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(sec(#16:Name, #17:Fresh)), 
   +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
   +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
   -(#23:NeNonceSet), 
   +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #11:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 14 . 10 . 11 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
#9:NeNonceSet !inI,
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
exp(#8:Gen, n(a, #6:Fresh)) inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet),
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet * n(a,
    #6:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
generatedByIntruder(#9:NeNonceSet), 
-(exp(#8:Gen, n(a, #6:Fresh))), 
-(#9:NeNonceSet), 
+(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
+(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, n(a, #6:Fresh))), 
      -(#9:NeNonceSet), 
      +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   #9:NeNonceSet !inI,
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   exp(#8:Gen, n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   generatedByIntruder(#9:NeNonceSet), 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) ),

ghost( a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#10:StrandSet || #11:IntruderKnowledge,
   #12:Gen != #13:Gen)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(sec(#16:Name, #17:Fresh)), 
      +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#14:Exp, #15:Nonce)), 
      -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
      +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
      -(#23:NeNonceSet), 
      +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #11:IntruderKnowledge) )
|| never((#10:StrandSet || #11:IntruderKnowledge,
#12:Gen != #13:Gen)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(sec(#16:Name, #17:Fresh)), 
   +(e(exp(#14:Exp, #18:Nonce), sec(#16:Name, #17:Fresh))), nil] ) ||
    #11:IntruderKnowledge)
((#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#14:Exp, #15:Nonce)), 
   -(e(exp(#14:Exp, #15:Nonce), #19:Secret)), 
   +(#19:Secret), nil] ) || #11:IntruderKnowledge)
(#10:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet)), 
   -(#23:NeNonceSet), 
   +(exp(#20:GenvExp, #21:NeNonceSet * #22:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #11:IntruderKnowledge))
< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 16 . 9 . 11 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) inI,
inst(#1:NeNonceSet),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh))
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
ghost( a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #2:Fresh)), 
      +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
      -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
      +(sec(a, #2:Fresh)), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(g, #1:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
      +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil]
    ,    
   sec(a, #2:Fresh) !inI,
   e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
   e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) inI,
   exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) inI,
   inst(g),
   inst(#1:NeNonceSet),
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh)),    
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))),    never((
    #7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) )
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 9) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 1 . 6 >
    (
:: nil ::
[ nil | 
   -(exp(g, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
   +(#6:Name ; exp(g, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #4:Fresh))), 
   +(exp(g, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
   +(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] )
|| 
#5:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(g, n(a, #4:Fresh)) !inI,
exp(g, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(a ; #6:Name ; exp(g, #5:NeNonceSet)) !inI,
(a ; #6:Name ; exp(g, n(a, #4:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #4:Fresh))) !inI,
exp(#0:Gen, n(b, #1:Fresh)) inI,
inst(#0:Gen),
inst(#2:NeNonceSet),
exp(g, #5:NeNonceSet * n(a, #4:Fresh)) != exp(#0:Gen, #2:NeNonceSet * n(b,
    #1:Fresh))
|| 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
generatedByIntruder(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
+(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
+(#6:Name ; exp(g, n(a, #4:Fresh))), 
-(#6:Name ; exp(g, n(a, #4:Fresh))), 
+(exp(g, n(a, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(g, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
+(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
|| 
ghost( #2:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(g, n(a, #4:Fresh))), 
      -(#5:NeNonceSet), 
      +(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
      -(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
      +(sec(a, #3:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, n(b, #1:Fresh))), 
      -(#2:NeNonceSet), 
      +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
      -(sec(a, #3:Fresh)), 
      +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
      +(#6:Name ; exp(g, n(a, #4:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#6:Name ; exp(g, n(a, #4:Fresh))), 
      +(exp(g, n(a, #4:Fresh))), nil]  & 
   :: #1:Fresh ::
   [ nil, 
      -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #1:Fresh))) | 
      -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]
     & 
   :: #4:Fresh,#3:Fresh ::
   [ nil | 
      +(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
      -(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
      +(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), nil] ,   
    
   #5:NeNonceSet !inI,
   sec(a, #3:Fresh) !inI,
   e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh)) !inI,
   e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
   exp(g, n(a, #4:Fresh)) !inI,
   exp(g, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
   exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
   (a ; #6:Name ; exp(g, #5:NeNonceSet)) !inI,
   (a ; #6:Name ; exp(g, n(a, #4:Fresh))) !inI,
   (#6:Name ; exp(g, n(a, #4:Fresh))) !inI,
   exp(#0:Gen, n(b, #1:Fresh)) inI,
   inst(#0:Gen),
   inst(#2:NeNonceSet),
   exp(g, #5:NeNonceSet * n(a, #4:Fresh)) != exp(#0:Gen, #2:NeNonceSet * n(b,
    #1:Fresh)),    
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   generatedByIntruder(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
   +(#6:Name ; exp(g, n(a, #4:Fresh))), 
   -(#6:Name ; exp(g, n(a, #4:Fresh))), 
   +(exp(g, n(a, #4:Fresh))), 
   generatedByIntruder(#5:NeNonceSet), 
   -(exp(g, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(a ; #6:Name ; exp(g, #5:NeNonceSet)), 
   +(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   resuscitated(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(exp(g, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(g, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))),   
    never((#7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) )
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 17 . 13 > (
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
#8:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(#7:Gen, n(a, #5:Fresh)) !inI,
exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) !inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
(#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet),
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet * n(a,
    #5:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
+(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
-(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
+(exp(#7:Gen, n(a, #5:Fresh))), 
generatedByIntruder(#8:NeNonceSet), 
-(exp(#7:Gen, n(a, #5:Fresh))), 
-(#8:NeNonceSet), 
+(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
+(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, n(a, #5:Fresh))), 
      -(#8:NeNonceSet), 
      +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
      +(exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
      +(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   #8:NeNonceSet !inI,
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   exp(#7:Gen, n(a, #5:Fresh)) !inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) !inI,
   (#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   (#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(#10:Msg ; #9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   -(#9:Msg ; exp(#7:Gen, n(a, #5:Fresh))), 
   +(exp(#7:Gen, n(a, #5:Fresh))), 
   generatedByIntruder(#8:NeNonceSet), 
   -(exp(#7:Gen, n(a, #5:Fresh))), 
   -(#8:NeNonceSet), 
   +(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#11:StrandSet || #12:IntruderKnowledge,
   #13:Gen != #14:Gen)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(sec(#17:Name, #18:Fresh)), 
      +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
      +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
      -(#24:NeNonceSet), 
      +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #12:IntruderKnowledge) ),

ghost( a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil, 
      +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
      -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
      +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil]
    ,    
   sec(a, #4:Fresh) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) inI,
   exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) != exp(#7:Gen, #8:NeNonceSet *
    n(a, #5:Fresh)),    
   -(a ; #6:Name ; exp(#7:Gen, #8:NeNonceSet)), 
   +(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#11:StrandSet || #12:IntruderKnowledge,
   #13:Gen != #14:Gen)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(sec(#17:Name, #18:Fresh)), 
      +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
      +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
      -(#24:NeNonceSet), 
      +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #12:IntruderKnowledge) )
|| never((#11:StrandSet || #12:IntruderKnowledge,
#13:Gen != #14:Gen)
((#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:Exp, #16:Nonce)), 
   -(sec(#17:Name, #18:Fresh)), 
   +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:Exp, #16:Nonce)), 
   -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
   +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
   -(#24:NeNonceSet), 
   +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #12:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 14 . 10 . 12 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
#9:NeNonceSet !inI,
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
exp(#8:Gen, n(a, #6:Fresh)) !inI,
exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet),
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet * n(a,
    #6:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
+(exp(#8:Gen, n(a, #6:Fresh))), 
generatedByIntruder(#9:NeNonceSet), 
-(exp(#8:Gen, n(a, #6:Fresh))), 
-(#9:NeNonceSet), 
+(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
+(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, n(a, #6:Fresh))), 
      -(#9:NeNonceSet), 
      +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
      +(exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   #9:NeNonceSet !inI,
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   exp(#8:Gen, n(a, #6:Fresh)) !inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   (#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(exp(#8:Gen, n(a, #6:Fresh))), 
   generatedByIntruder(#9:NeNonceSet), 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#11:StrandSet || #12:IntruderKnowledge,
   #13:Gen != #14:Gen)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(sec(#17:Name, #18:Fresh)), 
      +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
      +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
      -(#24:NeNonceSet), 
      +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #12:IntruderKnowledge) ),

ghost( a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#11:StrandSet || #12:IntruderKnowledge,
   #13:Gen != #14:Gen)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(sec(#17:Name, #18:Fresh)), 
      +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#15:Exp, #16:Nonce)), 
      -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
      +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
      -(#24:NeNonceSet), 
      +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #12:IntruderKnowledge) )
|| never((#11:StrandSet || #12:IntruderKnowledge,
#13:Gen != #14:Gen)
((#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:Exp, #16:Nonce)), 
   -(sec(#17:Name, #18:Fresh)), 
   +(e(exp(#15:Exp, #19:Nonce), sec(#17:Name, #18:Fresh))), nil] ) ||
    #12:IntruderKnowledge)
((#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#15:Exp, #16:Nonce)), 
   -(e(exp(#15:Exp, #16:Nonce), #20:Secret)), 
   +(#20:Secret), nil] ) || #12:IntruderKnowledge)
(#11:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#21:GenvExp, #22:NeNonceSet * #23:NeNonceSet)), 
   -(#24:NeNonceSet), 
   +(exp(#21:GenvExp, #22:NeNonceSet * #24:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #12:IntruderKnowledge))
< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 14 . 10 . 11 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(a, #3:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
#6:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#5:Gen, n(a, #3:Fresh)) inI,
inst(#1:NeNonceSet),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh))
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#5:Gen, n(a, #3:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
ghost( a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #2:Fresh)), 
      +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
      -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
      +(sec(a, #2:Fresh)), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(g, #1:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
      +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil]
    ,    
   sec(a, #2:Fresh) !inI,
   e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
   e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) inI,
   exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) inI,
   inst(g),
   inst(#1:NeNonceSet),
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh)),    
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))),    never((
    #7:StrandSet || #8:IntruderKnowledge,
   #9:Gen != #10:Gen)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(sec(#13:Name, #14:Fresh)), 
      +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#11:Exp, #12:Nonce)), 
      -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
      +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
      -(#20:NeNonceSet), 
      +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #8:IntruderKnowledge) )
|| never((#7:StrandSet || #8:IntruderKnowledge,
#9:Gen != #10:Gen)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(sec(#13:Name, #14:Fresh)), 
   +(e(exp(#11:Exp, #15:Nonce), sec(#13:Name, #14:Fresh))), nil] ) ||
    #8:IntruderKnowledge)
((#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#11:Exp, #12:Nonce)), 
   -(e(exp(#11:Exp, #12:Nonce), #16:Secret)), 
   +(#16:Secret), nil] ) || #8:IntruderKnowledge)
(#7:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#17:GenvExp, #18:NeNonceSet * #19:NeNonceSet)), 
   -(#20:NeNonceSet), 
   +(exp(#17:GenvExp, #18:NeNonceSet * #20:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #8:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 10) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 1 . 6 .
    5 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
   +(#7:Name ; exp(g, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Name ; exp(g, n(a, #5:Fresh))), 
   +(exp(g, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#5:Fresh ::
[ nil | 
   +(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
   +(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] )
|| 
#6:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(g, n(a, #5:Fresh)) !inI,
exp(g, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
(a ; #7:Name ; exp(g, #6:NeNonceSet)) !inI,
(a ; #7:Name ; exp(g, n(a, #5:Fresh))) !inI,
(#7:Name ; exp(g, n(a, #5:Fresh))) !inI,
(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI,
inst(#1:Gen),
inst(#3:NeNonceSet),
exp(g, #6:NeNonceSet * n(a, #5:Fresh)) != exp(#1:Gen, #3:NeNonceSet * n(b,
    #2:Fresh))
|| 
-(#0:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
generatedByIntruder(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
+(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
-(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
+(#7:Name ; exp(g, n(a, #5:Fresh))), 
-(#7:Name ; exp(g, n(a, #5:Fresh))), 
+(exp(g, n(a, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(g, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
+(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
|| 
ghost( #3:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(g, n(a, #5:Fresh))), 
      -(#6:NeNonceSet), 
      +(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
      -(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
      +(sec(a, #4:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, n(b, #2:Fresh))), 
      -(#3:NeNonceSet), 
      +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
      -(sec(a, #4:Fresh)), 
      +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
      +(#7:Name ; exp(g, n(a, #5:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#7:Name ; exp(g, n(a, #5:Fresh))), 
      +(exp(g, n(a, #5:Fresh))), nil]  & 
   :: #2:Fresh ::
   [ nil, 
      -(a ; b ; exp(#1:Gen, #3:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #2:Fresh))) | 
      -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]
     & 
   :: #4:Fresh,#5:Fresh ::
   [ nil | 
      +(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
      -(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
      +(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), nil] ,   
    
   #6:NeNonceSet !inI,
   sec(a, #4:Fresh) !inI,
   e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh)) !inI,
   e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
   exp(g, n(a, #5:Fresh)) !inI,
   exp(g, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
   exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
   (a ; #7:Name ; exp(g, #6:NeNonceSet)) !inI,
   (a ; #7:Name ; exp(g, n(a, #5:Fresh))) !inI,
   (#7:Name ; exp(g, n(a, #5:Fresh))) !inI,
   exp(#1:Gen, n(b, #2:Fresh)) inI,
   inst(#1:Gen),
   inst(#3:NeNonceSet),
   exp(g, #6:NeNonceSet * n(a, #5:Fresh)) != exp(#1:Gen, #3:NeNonceSet * n(b,
    #2:Fresh)),    
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   generatedByIntruder(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
   +(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #7:Name ; exp(g, n(a, #5:Fresh))), 
   +(#7:Name ; exp(g, n(a, #5:Fresh))), 
   -(#7:Name ; exp(g, n(a, #5:Fresh))), 
   +(exp(g, n(a, #5:Fresh))), 
   generatedByIntruder(#6:NeNonceSet), 
   -(exp(g, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(a ; #7:Name ; exp(g, #6:NeNonceSet)), 
   +(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   resuscitated(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(exp(g, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(g, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   -(e(exp(#1:Gen, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))),   
    never((#8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge))
(< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 17 . 13 . 15 > (
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
#9:NeNonceSet !inI,
sec(a, #5:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
exp(#8:Gen, n(a, #6:Fresh)) !inI,
exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) !inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
(#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet),
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet * n(a,
    #6:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
+(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
-(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
+(exp(#8:Gen, n(a, #6:Fresh))), 
generatedByIntruder(#9:NeNonceSet), 
-(exp(#8:Gen, n(a, #6:Fresh))), 
-(#9:NeNonceSet), 
+(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
+(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, n(a, #6:Fresh))), 
      -(#9:NeNonceSet), 
      +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
      +(exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
      +(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   #9:NeNonceSet !inI,
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   exp(#8:Gen, n(a, #6:Fresh)) !inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) !inI,
   (#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) !inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   (#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(#11:Msg ; #10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   -(#10:Msg ; exp(#8:Gen, n(a, #6:Fresh))), 
   +(exp(#8:Gen, n(a, #6:Fresh))), 
   generatedByIntruder(#9:NeNonceSet), 
   -(exp(#8:Gen, n(a, #6:Fresh))), 
   -(#9:NeNonceSet), 
   +(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#12:StrandSet || #13:IntruderKnowledge,
   #14:Gen != #15:Gen)
((#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:Exp, #17:Nonce)), 
      -(sec(#18:Name, #19:Fresh)), 
      +(e(exp(#16:Exp, #20:Nonce), sec(#18:Name, #19:Fresh))), nil] ) ||
    #13:IntruderKnowledge)
((#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:Exp, #17:Nonce)), 
      -(e(exp(#16:Exp, #17:Nonce), #21:Secret)), 
      +(#21:Secret), nil] ) || #13:IntruderKnowledge)
(#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#22:GenvExp, #24:NeNonceSet * #23:NeNonceSet)), 
      -(#25:NeNonceSet), 
      +(exp(#22:GenvExp, #24:NeNonceSet * #25:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #13:IntruderKnowledge) ),

ghost( a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil, 
      +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
      -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
      +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil]
    ,    
   sec(a, #5:Fresh) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) inI,
   exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) != exp(#8:Gen, #9:NeNonceSet *
    n(a, #6:Fresh)),    
   -(a ; #7:Name ; exp(#8:Gen, #9:NeNonceSet)), 
   +(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#8:Gen, #9:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#12:StrandSet || #13:IntruderKnowledge,
   #14:Gen != #15:Gen)
((#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:Exp, #17:Nonce)), 
      -(sec(#18:Name, #19:Fresh)), 
      +(e(exp(#16:Exp, #20:Nonce), sec(#18:Name, #19:Fresh))), nil] ) ||
    #13:IntruderKnowledge)
((#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#16:Exp, #17:Nonce)), 
      -(e(exp(#16:Exp, #17:Nonce), #21:Secret)), 
      +(#21:Secret), nil] ) || #13:IntruderKnowledge)
(#12:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#22:GenvExp, #24:NeNonceSet * #23:NeNonceSet)), 
      -(#25:NeNonceSet), 
      +(exp(#22:GenvExp, #24:NeNonceSet * #25:NeNonceSet * #23:NeNonceSet)),
    nil] ) || #13:IntruderKnowledge) )
|| never((#12:StrandSet || #13:IntruderKnowledge,
#14:Gen != #15:Gen)
((#12:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:Exp, #17:Nonce)), 
   -(sec(#18:Name, #19:Fresh)), 
   +(e(exp(#16:Exp, #20:Nonce), sec(#18:Name, #19:Fresh))), nil] ) ||
    #13:IntruderKnowledge)
((#12:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:Exp, #17:Nonce)), 
   -(e(exp(#16:Exp, #17:Nonce), #21:Secret)), 
   +(#21:Secret), nil] ) || #13:IntruderKnowledge)
(#12:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#22:GenvExp, #24:NeNonceSet * #23:NeNonceSet)), 
   -(#25:NeNonceSet), 
   +(exp(#22:GenvExp, #24:NeNonceSet * #25:NeNonceSet * #23:NeNonceSet)), nil]
    ) || #13:IntruderKnowledge))
< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 14 . 10 . 12 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(a, #3:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
   +(exp(#5:Gen, n(a, #3:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
#6:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#5:Gen, n(a, #3:Fresh)) !inI,
exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))) inI,
inst(#1:NeNonceSet),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh))
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
+(exp(#5:Gen, n(a, #3:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#5:Gen, n(a, #3:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
ghost( a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #2:Fresh)), 
      +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
      -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
      +(sec(a, #2:Fresh)), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(g, #1:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
      +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil]
    ,    
   sec(a, #2:Fresh) !inI,
   e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
   e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) inI,
   exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) inI,
   inst(g),
   inst(#1:NeNonceSet),
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh)),    
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))),    never((
    #8:StrandSet || #9:IntruderKnowledge,
   #10:Gen != #11:Gen)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(sec(#14:Name, #15:Fresh)), 
      +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#12:Exp, #13:Nonce)), 
      -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
      +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
      -(#21:NeNonceSet), 
      +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)),
    nil] ) || #9:IntruderKnowledge) )
|| never((#8:StrandSet || #9:IntruderKnowledge,
#10:Gen != #11:Gen)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(sec(#14:Name, #15:Fresh)), 
   +(e(exp(#12:Exp, #16:Nonce), sec(#14:Name, #15:Fresh))), nil] ) ||
    #9:IntruderKnowledge)
((#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#12:Exp, #13:Nonce)), 
   -(e(exp(#12:Exp, #13:Nonce), #17:Secret)), 
   +(#17:Secret), nil] ) || #9:IntruderKnowledge)
(#8:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#18:GenvExp, #20:NeNonceSet * #19:NeNonceSet)), 
   -(#21:NeNonceSet), 
   +(exp(#18:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #9:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 11) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 1 . 6 .
    5 . 6 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
   +(#8:Name ; exp(g, n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Name ; exp(g, n(a, #6:Fresh))), 
   +(exp(g, n(a, #6:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]  &
    
:: #5:Fresh,#6:Fresh ::
[ nil | 
   +(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
   +(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] )
|| 
#7:NeNonceSet !inI,
sec(a, #5:Fresh) !inI,
e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
exp(g, n(a, #6:Fresh)) !inI,
exp(g, #7:NeNonceSet * n(a, #6:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
(a ; #8:Name ; exp(g, #7:NeNonceSet)) !inI,
(a ; #8:Name ; exp(g, n(a, #6:Fresh))) !inI,
(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
(#8:Name ; exp(g, n(a, #6:Fresh))) !inI,
(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI,
inst(#2:Gen),
inst(#4:NeNonceSet),
exp(g, #7:NeNonceSet * n(a, #6:Fresh)) != exp(#2:Gen, #4:NeNonceSet * n(b,
    #3:Fresh))
|| 
-(#0:Msg ; #1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#1:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
generatedByIntruder(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
+(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
-(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
+(#8:Name ; exp(g, n(a, #6:Fresh))), 
-(#8:Name ; exp(g, n(a, #6:Fresh))), 
+(exp(g, n(a, #6:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(g, n(a, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
-(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
+(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
resuscitated(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
-(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)))
|| 
ghost( #4:NeNonceSet,
   :: nil ::
   [ nil | 
      -(exp(g, n(a, #6:Fresh))), 
      -(#7:NeNonceSet), 
      +(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
      -(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
      +(sec(a, #5:Fresh)), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, n(b, #3:Fresh))), 
      -(#4:NeNonceSet), 
      +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
      -(sec(a, #5:Fresh)), 
      +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: nil ::
   [ nil | 
      -(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
      +(#8:Name ; exp(g, n(a, #6:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(#8:Name ; exp(g, n(a, #6:Fresh))), 
      +(exp(g, n(a, #6:Fresh))), nil]  & 
   :: #3:Fresh ::
   [ nil, 
      -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #3:Fresh))) | 
      -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil]
     & 
   :: #5:Fresh,#6:Fresh ::
   [ nil | 
      +(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
      -(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
      +(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), nil] ,   
    
   #7:NeNonceSet !inI,
   sec(a, #5:Fresh) !inI,
   e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh)) !inI,
   e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
   exp(g, n(a, #6:Fresh)) !inI,
   exp(g, #7:NeNonceSet * n(a, #6:Fresh)) !inI,
   exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
   (a ; #8:Name ; exp(g, #7:NeNonceSet)) !inI,
   (a ; #8:Name ; exp(g, n(a, #6:Fresh))) !inI,
   (#8:Name ; exp(g, n(a, #6:Fresh))) !inI,
   exp(#2:Gen, n(b, #3:Fresh)) inI,
   inst(#2:Gen),
   inst(#4:NeNonceSet),
   exp(g, #7:NeNonceSet * n(a, #6:Fresh)) != exp(#2:Gen, #4:NeNonceSet * n(b,
    #3:Fresh)),    
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   generatedByIntruder(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
   +(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #8:Name ; exp(g, n(a, #6:Fresh))), 
   +(#8:Name ; exp(g, n(a, #6:Fresh))), 
   -(#8:Name ; exp(g, n(a, #6:Fresh))), 
   +(exp(g, n(a, #6:Fresh))), 
   generatedByIntruder(#7:NeNonceSet), 
   -(exp(g, n(a, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
   -(a ; #8:Name ; exp(g, #7:NeNonceSet)), 
   +(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   resuscitated(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
   -(exp(g, #7:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(g, #7:NeNonceSet * n(a, #6:Fresh)), sec(a, #5:Fresh))), 
   +(sec(a, #5:Fresh)), 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #5:Fresh))),   
    never((#9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge))
< (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 17 . 13 . 15 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(a, #3:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
   +(exp(#5:Gen, n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
   +(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
#6:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#5:Gen, n(a, #3:Fresh)) !inI,
exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))) !inI,
(#8:Msg ; #7:Msg ; exp(#5:Gen, n(a, #3:Fresh))) inI,
inst(#1:NeNonceSet),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh))
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
+(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
-(#7:Msg ; exp(#5:Gen, n(a, #3:Fresh))), 
+(exp(#5:Gen, n(a, #3:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#5:Gen, n(a, #3:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
ghost( a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet),
   :: nil ::
   [ nil | 
      -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
      -(sec(a, #2:Fresh)), 
      +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: nil ::
   [ nil | 
      -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
      -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
      +(sec(a, #2:Fresh)), nil]  & 
   :: #0:Fresh ::
   [ nil, 
      -(a ; b ; exp(g, #1:NeNonceSet)), 
      +(a ; b ; exp(g, n(b, #0:Fresh))) | 
      -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
   :: #2:Fresh,#3:Fresh ::
   [ nil, 
      +(a ; #4:Name ; exp(g, n(a, #3:Fresh))) | 
      -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
      +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil]
    ,    
   sec(a, #2:Fresh) !inI,
   e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
   e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) inI,
   exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)) inI,
   inst(g),
   inst(#1:NeNonceSet),
   exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#5:Gen, #6:NeNonceSet * n(a,
    #3:Fresh)),    
   -(a ; #4:Name ; exp(#5:Gen, #6:NeNonceSet)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   resuscitated(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))),    never((
    #9:StrandSet || #10:IntruderKnowledge,
   #12:Gen != #11:Gen)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(sec(#15:Name, #16:Fresh)), 
      +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#13:Exp, #14:Nonce)), 
      -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
      +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
   :: nil ::
   [ nil | 
      -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
      -(#22:NeNonceSet), 
      +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)),
    nil] ) || #10:IntruderKnowledge) )
|| never((#9:StrandSet || #10:IntruderKnowledge,
#12:Gen != #11:Gen)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(sec(#15:Name, #16:Fresh)), 
   +(e(exp(#13:Exp, #17:Nonce), sec(#15:Name, #16:Fresh))), nil] ) ||
    #10:IntruderKnowledge)
((#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#13:Exp, #14:Nonce)), 
   -(e(exp(#13:Exp, #14:Nonce), #18:Secret)), 
   +(#18:Secret), nil] ) || #10:IntruderKnowledge)
(#9:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet)), 
   -(#22:NeNonceSet), 
   +(exp(#19:GenvExp, #20:NeNonceSet * #21:NeNonceSet * #22:NeNonceSet)), nil]
    ) || #10:IntruderKnowledge)
==========================================
reduce in MAUDE-NPA : run(2, 12) .
rewrites: 18 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystem: < (1[2]) . 5 . 3 . 17 . (0{1}) . 2 . 12 . 9 . 11 . 1 . 6 . 5 .
    6 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(g, #4:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #4:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(g, #4:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; #5:Name ; exp(g, n(a, #3:Fresh))), 
   +(#5:Name ; exp(g, n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name ; exp(g, n(a, #3:Fresh))), 
   +(exp(g, n(a, #3:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil | 
   +(a ; #5:Name ; exp(g, n(a, #3:Fresh))), 
   -(a ; #5:Name ; exp(g, #4:NeNonceSet)), 
   +(e(exp(g, #4:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), nil] )
|| 
#1:NeNonceSet !inI,
#4:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(g, #4:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #3:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(g, #4:NeNonceSet * n(a, #3:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(a ; #5:Name ; exp(g, #4:NeNonceSet)) !inI,
(a ; #5:Name ; exp(g, n(a, #3:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#5:Name ; exp(g, n(a, #3:Fresh))) !inI,
inst(#1:NeNonceSet),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(g, #4:NeNonceSet * n(a,
    #3:Fresh))
|| 
generatedByIntruder(#1:NeNonceSet), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
generatedByIntruder(a ; #5:Name ; exp(g, #4:NeNonceSet)), 
+(a ; #5:Name ; exp(g, n(a, #3:Fresh))), 
-(a ; #5:Name ; exp(g, n(a, #3:Fresh))), 
+(#5:Name ; exp(g, n(a, #3:Fresh))), 
-(#5:Name ; exp(g, n(a, #3:Fresh))), 
+(exp(g, n(a, #3:Fresh))), 
generatedByIntruder(#4:NeNonceSet), 
-(exp(g, n(a, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(g, #4:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #5:Name ; exp(g, #4:NeNonceSet)), 
+(e(exp(g, #4:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(g, #4:NeNonceSet * n(a, #3:Fresh))), 
-(exp(g, #4:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(g, #4:NeNonceSet * n(a, #3:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
|| 
nil
|| never((#6:StrandSet || #7:IntruderKnowledge,
#8:Gen != #9:Gen)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(sec(#12:Name, #13:Fresh)), 
   +(e(exp(#10:Exp, #14:Nonce), sec(#12:Name, #13:Fresh))), nil] ) ||
    #7:IntruderKnowledge)
((#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#10:Exp, #11:Nonce)), 
   -(e(exp(#10:Exp, #11:Nonce), #15:Secret)), 
   +(#15:Secret), nil] ) || #7:IntruderKnowledge)
(#6:StrandSet & 
:: nil ::
[ nil | 
   -(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet)), 
   -(#19:NeNonceSet), 
   +(exp(#16:GenvExp, #17:NeNonceSet * #18:NeNonceSet * #19:NeNonceSet)), nil]
    ) || #7:IntruderKnowledge)
Maude> Bye.
